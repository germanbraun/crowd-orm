// Generated by CoffeeScript 1.12.5
(function() {
  var ORMDiagram, exports, ref,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  exports = exports != null ? exports : this;

  exports.model = (ref = exports.model) != null ? ref : {};

  ORMDiagram = (function(superClass) {
    extend(ORMDiagram, superClass);

    function ORMDiagram(graph) {
      this.graph = graph != null ? graph : null;
      this.clases = [];
      this.links = [];
      this.cells_nuevas = [];
      this.cells_deleted = [];
      this.factory = new model.ORMFactory();
    }

    ORMDiagram.prototype.get_factory = function() {
      return this.factory;
    };

    ORMDiagram.prototype.set_factory = function(factory) {
      this.factory = factory;
    };

    ORMDiagram.prototype.get_graph = function() {
      return this.graph;
    };

    ORMDiagram.prototype.set_graph = function(graph) {
      this.graph = graph;
    };

    ORMDiagram.prototype.get_clases = function() {
      return this.clases;
    };

    ORMDiagram.prototype.get_links = function() {
      return this.links;
    };

    ORMDiagram.prototype.get_clase = function(nombre) {};

    ORMDiagram.prototype.find_class_by_name = function(name) {
      return this.clases.find(function(elt, index, arr) {
        return elt.get_name() === name;
      });
    };

    ORMDiagram.prototype.find_class_by_classid = function(classid) {
      return this.clases.find(function(elt, index, arr) {
        return elt.has_classid(classid);
      });
    };

    ORMDiagram.prototype.find_IsA_with_parent = function(parentclass) {
      return this.links.find(function(elt, index, arr) {
        return elt.has_parent(parentclass);
      });
    };

    ORMDiagram.prototype.add_generalization = function(class_parent, class_childs, disjoint, covering) {
      var class_child_obj, class_parent_obj;
      if (disjoint == null) {
        disjoint = false;
      }
      if (covering == null) {
        covering = false;
      }
      class_parent_obj = null;
      class_child_obj = null;
      if (typeof class_parent === "string") {
        class_parent_obj = this.find_class_by_classid(class_parent);
      } else if (typeof class_parent === "object") {
        class_parent_obj = class_parent;
      }
      if (class_childs instanceof Array) {
        class_childs.forEach(function(child) {
          return this.add_generalization(class_parent, child, disjoint, covering);
        }, this);
      } else if (typeof class_childs === "string") {
        class_child_obj = this.find_class_by_classid(class_childs);
      } else if (typeof class_childs === "object") {
        class_child_obj = class_childs;
      }
      if ((class_child_obj != null) && (class_parent_obj != null)) {
        return this.add_generalization_objs(class_parent_obj, class_child_obj, disjoint, covering);
      }
    };

    ORMDiagram.prototype.add_generalization_objs = function(class_parent, class_child, disjoint, covering) {
      var gen;
      if (disjoint == null) {
        disjoint = false;
      }
      if (covering == null) {
        covering = false;
      }
      gen = this.find_IsA_with_parent(class_parent);
      if ((gen === void 0) || (gen === null)) {
        gen = new model.Generalization(class_parent, [class_child]);
        gen.set_disjoint(disjoint);
        gen.set_covering(covering);
        return this.agregar_link(gen);
      } else {
        gen.add_child(class_child);
        gen.create_joint(this.factory, csstheme);
        this.cells_nuevas.push(gen.get_joint_for_child(class_child));
        return this.actualizar_graph();
      }
    };

    ORMDiagram.prototype.add_association = function(class_a_id, class_b_id, name, mult, roles) {
      var class_a, class_b, newassoc;
      if (name == null) {
        name = null;
      }
      if (mult == null) {
        mult = null;
      }
      if (roles == null) {
        roles = null;
      }
      class_a = this.find_class_by_classid(class_a_id);
      class_b = this.find_class_by_classid(class_b_id);
      newassoc = new model.Link([class_a, class_b], name);
      if (mult !== null) {
        newassoc.set_mult(mult);
      }
      if (roles !== null) {
        newassoc.set_roles(roles);
      }
      return this.agregar_link(newassoc);
    };

    ORMDiagram.prototype.add_association_class = function(class_a_id, class_b_id, name, mult, roles) {
      var class_a, class_b, newassoc;
      if (mult == null) {
        mult = null;
      }
      if (roles == null) {
        roles = null;
      }
      class_a = this.find_class_by_classid(class_a_id);
      class_b = this.find_class_by_classid(class_b_id);
      newassoc = new model.LinkWithClass([class_a, class_b], name);
      if (mult !== null) {
        newassoc.set_mult(mult);
      }
      if (roles !== null) {
        newassoc.set_roles(roles);
      }
      this.agregar_link(newassoc);
      return newassoc.update_position();
    };

    ORMDiagram.prototype.add_class = function(hash_data) {
      var newclass;
      if (hash_data.attribs === void 0) {
        hash_data.attribs = [];
      }
      if (hash_data.methods === void 0) {
        hash_data.methods = [];
      }
      newclass = new model.Class(hash_data.name, hash_data.attribs, hash_data.methods);
      this.agregar_clase(newclass);
      return newclass;
    };

    ORMDiagram.prototype.agregar_clase = function(clase) {
      this.clases.push(clase);
      this.cells_nuevas.push(clase.get_joint(this.factory, csstheme));
      return this.actualizar_graph();
    };

    ORMDiagram.prototype.delete_class = function(c) {
      this.clases = this.clases.filter(function(elt, index, arr) {
        return elt !== c;
      });
      this.remove_associated_links(c);
      this.cells_deleted = this.cells_deleted.concat(c.get_joint());
      return this.actualizar_graph();
    };

    ORMDiagram.prototype.find_associated_links = function(c) {
      return this.links.filter(function(link, indx, arr) {
        return link.is_associated(c);
      }, this);
    };

    ORMDiagram.prototype.remove_associated_links = function(c) {
      var lst;
      lst = this.find_associated_links(c);
      return lst.forEach(function(link, indx, arr) {
        return this.delete_link(link);
      }, this);
    };

    ORMDiagram.prototype.rename_class = function(classid, name) {
      var c;
      c = this.find_class_by_classid(classid);
      if (c !== null) {
        return c.set_name(name);
      }
    };

    ORMDiagram.prototype.delete_link = function(link) {
      this.links = this.links.filter(function(elt, index, arr) {
        return elt !== link;
      });
      this.cells_deleted = this.cells_deleted.concat(link.get_joint());
      return this.actualizar_graph();
    };

    ORMDiagram.prototype.update_view = function(class_id, paper) {
      var class_obj;
      class_obj = this.find_class_by_classid(class_id);
      if (class_obj !== null) {
        return class_obj.update_view(paper);
      }
    };

    ORMDiagram.prototype.delete_class_by_name = function(name) {
      var c;
      c = this.find_class_by_name(name);
      if (c !== void 0) {
        return this.delete_class(c);
      }
    };

    ORMDiagram.prototype.delete_class_by_classid = function(classid) {
      var c;
      c = this.find_class_by_classid(classid);
      if (c !== void 0) {
        return this.delete_class(c);
      }
    };

    ORMDiagram.prototype.reset = function() {
      this.clases.forEach(function(c, i, arr) {
        return this.delete_class(c);
      }, this);
      return this.actualizar_graph();
    };

    ORMDiagram.prototype.agregar_link = function(link) {
      this.links.push(link);
      this.cells_nuevas.push(link.get_joint(this.factory, csstheme));
      return this.actualizar_graph();
    };

    ORMDiagram.prototype.set_satisfiable = function(classes_list) {
      return classes_list.forEach(function(class_name, i, arr) {
        return this.set_class_satisfiable(class_name);
      }, this);
    };

    ORMDiagram.prototype.set_class_satisfiable = function(class_name) {
      var c;
      c = this.find_class_by_name(class_name);
      if (c != null) {
        return c.set_unsatisfiable(false, csstheme);
      }
    };

    ORMDiagram.prototype.set_unsatisfiable = function(classes_list) {
      return classes_list.forEach(function(class_name, i, arr) {
        return this.set_class_unsatisfiable(class_name);
      }, this);
    };

    ORMDiagram.prototype.set_class_unsatisfiable = function(class_name) {
      var c;
      c = this.find_class_by_name(class_name);
      if (c != null) {
        return c.set_unsatisfiable(true, csstheme);
      }
    };

    ORMDiagram.prototype.actualizar_graph = function() {
      if (this.graph !== null) {
        this.graph.addCell(this.cells_nuevas);
        this.cells_deleted.forEach(function(elt, index, arr) {
          return elt.remove();
        });
      }
      this.cells_deleted = [];
      return this.cells_nuevas = [];
    };

    ORMDiagram.prototype.to_json = function() {
      var classes_json, links_json;
      classes_json = $.map(this.clases, function(myclass) {
        return myclass.to_json();
      });
      links_json = $.map(this.links, function(mylink) {
        return mylink.to_json();
      });
      return {
        classes: classes_json,
        links: links_json
      };
    };

    ORMDiagram.prototype.import_json = function(json) {
      json.classes.forEach(function(elt, index, arr) {
        var c;
        c = this.add_class(elt);
        return c.get_joint()[0].position(elt.position.x, elt.position.y);
      }, this);
      return json.links.forEach(function(elt, index, arr) {
        var class_a, class_b, class_parent, classes_children, covering, disjoint;
        if (elt.type === "association") {
          class_a = this.find_class_by_name(elt.classes[0]);
          class_b = this.find_class_by_name(elt.classes[1]);
          if (elt.associated_class != null) {
            this.add_association_class(class_a.get_classid(), class_b.get_classid(), elt.name, elt.multiplicity, elt.roles);
          } else {
            this.add_association(class_a.get_classid(), class_b.get_classid(), elt.name, elt.multiplicity, elt.roles);
          }
        }
        if (elt.type === "generalization") {
          class_parent = this.find_class_by_name(elt.parent);
          classes_children = elt.classes.map(function(childname) {
            return this.find_class_by_name(childname);
          }, this);
          disjoint = elt.constraint.includes("disjoint");
          covering = elt.constraint.includes("covering");
          return this.add_generalization(class_parent, classes_children, disjoint, covering);
        }
      }, this);
    };

    return ORMDiagram;

  })(model.Diagram);

  exports.model.ORMDiagram = ORMDiagram;

}).call(this);
