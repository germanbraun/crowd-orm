// Generated by CoffeeScript 1.12.5
var Attribute, Class, Entity, Generalization, Link, LinkAttrToEntity, LinkISAToEntity, LinkWithClass, MyModel, exports,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

MyModel = (function() {
  function MyModel(name1) {
    this.name = name1;
    this.joint = null;
  }

  MyModel.prototype.get_joint = function(factory, csstheme) {
    if (factory == null) {
      factory = null;
    }
    if (csstheme == null) {
      csstheme = null;
    }
    if (factory !== null) {
      this.create_joint(factory, csstheme);
    }
    return this.joint;
  };

  MyModel.prototype.create_joint = function(factory, csstheme) {
    if (csstheme == null) {
      csstheme = null;
    }
    console.warn(this.toString() + " : Redefine create_joint() method on the subclass.");
    return null;
  };

  MyModel.prototype.update_view = function(paper) {
    if (this.joint !== null) {
      return this.joint.forEach(function(elt, index, arr) {
        var v;
        v = elt.findView(paper);
        return v.update();
      }, this);
    }
  };

  MyModel.prototype.has_classid = function(classid) {
    return this.get_classid() === classid;
  };

  MyModel.prototype.has_attrid = function(attrid) {
    return this.get_attributeid() === attrid;
  };

  MyModel.prototype.has_isaid = function(isaid) {
    return this.get_isaid() === isaid;
  };

  MyModel.prototype.get_classid = function() {
    if (this.joint === null) {
      return false;
    } else {
      return this.joint[0].id;
    }
  };

  MyModel.prototype.get_attributeid = function() {
    if (this.joint === null) {
      return false;
    } else {
      return this.joint[0].id;
    }
  };

  MyModel.prototype.get_isaid = function() {
    if (this.joint === null) {
      return false;
    } else {
      return this.joint[0].id;
    }
  };

  MyModel.prototype.to_json = function() {
    return {
      name: this.name
    };
  };

  MyModel.prototype.update_position = function() {};

  return MyModel;

})();

Class = (function(superClass) {
  extend(Class, superClass);

  function Class(name, attrs, methods) {
    this.attrs = attrs != null ? attrs : null;
    this.methods = methods != null ? methods : null;
    Class.__super__.constructor.call(this, name);
    this.joint = null;
    this.unsatisfiable = false;
    this.on_change_objs = [];
  }

  Class.prototype.get_name = function() {
    return this.name;
  };

  Class.prototype.set_name = function(name1) {
    this.name = name1;
    if (this.joint !== null) {
      return this.joint[0].set("name", this.name);
    }
  };

  Class.prototype.get_attrs = function() {
    return this.attrs;
  };

  Class.prototype.get_methods = function() {
    return this.methods;
  };

  Class.prototype.set_unsatisfiable = function(bool, csstheme) {
    if (csstheme == null) {
      csstheme = null;
    }
    this.unsatisfiable = bool;
    if (csstheme != null) {
      return this.set_theme(csstheme);
    }
  };

  Class.prototype.set_theme = function(csstheme) {
    if ((this.joint != null) && (this.joint.length > 0)) {
      if (this.unsatisfiable) {
        return this.joint[0].set('attrs', csstheme.css_class_unsatisfiable);
      } else {
        return this.joint[0].set('attrs', csstheme.css_class);
      }
    }
  };

  Class.prototype.create_joint = function(factory, csstheme) {
    var cssclass;
    if (csstheme == null) {
      csstheme = null;
    }
    if (this.joint == null) {
      this.joint = [];
      if (csstheme != null) {
        if (this.unsatisfiable) {
          return cssclass = csstheme.css_class_unsatisfiable;
        } else {
          cssclass = csstheme.css_class;
          return this.joint.push(factory.create_class(this.name, this.attrs, this.methods, cssclass));
        }
      } else {
        return this.joint.push(factory.create_class(this.name, this.attrs, this.methods));
      }
    }
  };

  Class.prototype.to_json = function() {
    var array, json;
    json = Class.__super__.to_json.call(this);
    array = [];
    if (this.attrs != null) {
      this.attrs.forEach(function(cv, index, attrs) {
        var datatype_attr, dots, name_attr;
        this.attrs = attrs;
        dots = this.attrs[index].split(":");
        name_attr = dots[0];
        datatype_attr = dots[1];
        array.push({
          name: name_attr,
          datatype: datatype_attr
        });
        return array;
      });
    }
    json.attrs = array;
    json.methods = this.methods;
    if (this.joint != null) {
      json.position = this.joint[0].position();
    }
    return json;
  };

  Class.prototype.attach_my_event_handlers = function() {
    if (this.joint != null) {
      if (this.joint[0].mymodel_class == null) {
        this.joint[0].mymodel_class = this;
        return this.joint[0].on('change:position', function() {
          return this.mymodel_class.notify_change_position(this);
        });
      }
    }
  };

  Class.prototype.attach_on_change_position = function(object) {
    this.attach_my_event_handlers();
    return this.on_change_objs.push(object);
  };

  Class.prototype.notify_change_position = function(model) {
    return this.on_change_objs.forEach(function(obj, indx, arr) {
      return obj.update_position();
    });
  };

  return Class;

})(MyModel);

Entity = (function(superClass) {
  extend(Entity, superClass);

  function Entity(name, attrs) {
    this.attrs = attrs != null ? attrs : null;
    Entity.__super__.constructor.call(this, name);
    this.joint = null;
    this.unsatisfiable = false;
    this.on_change_objs = [];
  }

  Entity.prototype.get_name = function() {
    return this.name;
  };

  Entity.prototype.set_name = function(name1) {
    this.name = name1;
    if (this.joint !== null) {
      return this.joint[0].set("name", this.name);
    }
  };

  Entity.prototype.get_attrs = function() {
    return this.attrs;
  };

  Entity.prototype.set_unsatisfiable = function(bool, csstheme) {
    if (csstheme == null) {
      csstheme = null;
    }
    this.unsatisfiable = bool;
    if (csstheme != null) {
      return this.set_theme(csstheme);
    }
  };

  Entity.prototype.set_theme = function(csstheme) {
    if ((this.joint != null) && (this.joint.length > 0)) {
      if (this.unsatisfiable) {
        return this.joint[0].set('attrs', csstheme.css_class_unsatisfiable);
      } else {
        return this.joint[0].set('attrs', csstheme.css_class);
      }
    }
  };

  Entity.prototype.create_joint = function(factory, csstheme) {
    var cssclass;
    if (csstheme == null) {
      csstheme = null;
    }
    if (this.joint == null) {
      this.joint = [];
      if (csstheme != null) {
        if (this.unsatisfiable) {
          return cssclass = csstheme.css_class_unsatisfiable;
        } else {
          cssclass = csstheme.css_class;
          return this.joint.push(factory.create_class(this.name, this.attrs, cssclass));
        }
      } else {
        return this.joint.push(factory.create_class(this.name, this.attrs));
      }
    }
  };

  Entity.prototype.to_json = function() {
    var json;
    json = Entity.__super__.to_json.call(this);
    if (this.joint != null) {
      json.position = this.joint[0].position();
    }
    return json;
  };

  Entity.prototype.attach_my_event_handlers = function() {
    if (this.joint != null) {
      if (this.joint[0].mymodel_class == null) {
        this.joint[0].mymodel_class = this;
        return this.joint[0].on('change:position', function() {
          return this.mymodel_class.notify_change_position(this);
        });
      }
    }
  };

  Entity.prototype.attach_on_change_position = function(object) {
    this.attach_my_event_handlers();
    return this.on_change_objs.push(object);
  };

  Entity.prototype.notify_change_position = function(model) {
    return this.on_change_objs.forEach(function(obj, indx, arr) {
      return obj.update_position();
    });
  };

  return Entity;

})(MyModel);

Attribute = (function(superClass) {
  extend(Attribute, superClass);

  function Attribute(name, type) {
    this.type = type != null ? type : null;
    Attribute.__super__.constructor.call(this, name);
    this.joint = null;
    this.unsatisfiable = false;
    this.on_change_objs = [];
  }

  Attribute.prototype.get_name = function() {
    return this.name;
  };

  Attribute.prototype.set_name = function(name1) {
    this.name = name1;
    if (this.joint !== null) {
      return this.joint[0].set("name", this.name);
    }
  };

  Attribute.prototype.get_attr_type = function() {
    return this.type;
  };

  Attribute.prototype.create_joint = function(factory, csstheme) {
    var cssclass;
    if (csstheme == null) {
      csstheme = null;
    }
    if (this.joint == null) {
      this.joint = [];
      if (csstheme != null) {
        if (this.unsatisfiable) {
          return cssclass = csstheme.css_class_unsatisfiable;
        } else {
          cssclass = csstheme.css_class;
          return this.joint.push(factory.create_attribute(this.name, this.type, cssclass));
        }
      } else {
        return this.joint.push(factory.create_attribute(this.name, this.type));
      }
    }
  };

  Attribute.prototype.to_json = function() {
    var json;
    json = Attribute.__super__.to_json.call(this);
    json.type = this.type;
    delete json.attrs;
    delete json.methods;
    return json;
  };

  return Attribute;

})(Class);

Link = (function(superClass) {
  extend(Link, superClass);

  function Link(classes, name) {
    this.classes = classes;
    if (name == null) {
      name = null;
    }
    if (name != null) {
      Link.__super__.constructor.call(this, name);
    } else {
      Link.__super__.constructor.call(this, Link.get_new_name());
    }
    this.mult = [null, null];
    this.roles = [null, null];
  }

  Link.prototype.set_mult = function(mult1) {
    var i, j, len, m, ref, results;
    this.mult = mult1;
    ref = this.mult;
    results = [];
    for (i = j = 0, len = ref.length; j < len; i = ++j) {
      m = ref[i];
      results.push(this.change_to_null(m, i));
    }
    return results;
  };

  Link.prototype.set_roles = function(roles) {
    this.roles = roles;
  };

  Link.prototype.change_to_null = function(mult, index) {
    if ((mult === "0..*") || (mult === "0..n")) {
      return this.mult[index] = null;
    }
  };

  Link.prototype.set_from = function(class_from) {
    return this.classes[0] = class_from;
  };

  Link.prototype.get_from = function() {
    return this.classes[0];
  };

  Link.prototype.set_to = function(class_to) {
    return this.classes[1] = class_to;
  };

  Link.prototype.get_to = function() {
    return this.classes[1];
  };

  Link.prototype.get_classes = function() {
    return this.classes;
  };

  Link.prototype.is_two_linked = function() {
    return this.classes.length === 2;
  };

  Link.prototype.has_parent = function(parentclass) {
    return false;
  };

  Link.prototype.is_associated = function(c) {
    return this.has_parent(c) || this.classes.includes(c);
  };

  Link.prototype.to_json = function() {
    var json;
    json = Link.__super__.to_json.call(this);
    json.classes = $.map(this.classes, function(myclass) {
      return myclass.get_name();
    });
    json.multiplicity = this.mult;
    json.roles = this.roles;
    json.type = "association";
    return json;
  };

  Link.prototype.create_joint = function(factory, csstheme) {
    if (csstheme == null) {
      csstheme = null;
    }
    if (this.joint === null) {
      this.joint = [];
      if (csstheme !== null) {
        return this.joint.push(factory.create_association(this.classes[0].get_classid(), this.classes[1].get_classid(), this.name, csstheme.css_links, this.mult, this.roles));
      } else {
        return this.joint.push(factory.create_association(this.classes[0].get_classid(), this.classes[1].get_classid(), this.name, null, this.mult, this.roles));
      }
    }
  };

  return Link;

})(MyModel);

Link.get_new_name = function() {
  if (Link.name_number === void 0) {
    Link.name_number = 0;
  }
  Link.name_number = Link.name_number + 1;
  return "r" + Link.name_number;
};

Generalization = (function(superClass) {
  extend(Generalization, superClass);

  function Generalization(parent_class, classes) {
    this.parent_class = parent_class;
    this.classes = classes;
    Generalization.__super__.constructor.call(this, this.classes);
    this.disjoint = false;
    this.covering = false;
  }

  Generalization.prototype.get_joint = function(factory, csstheme) {
    if (factory == null) {
      factory = null;
    }
    if (csstheme == null) {
      csstheme = null;
    }
    Generalization.__super__.get_joint.call(this, factory, csstheme);
    if (this.joint.length < this.classes.length) {
      if (factory !== null) {
        this.create_joint(factory, csstheme);
      }
    }
    return this.joint;
  };

  Generalization.prototype.create_joint = function(factory, csstheme) {
    if (csstheme == null) {
      csstheme = null;
    }
    if (csstheme === null) {
      csstheme = {
        css_links: null
      };
    }
    if ((this.joint === null) || (this.joint.length < this.classes.length)) {
      this.joint = [];
      return this.classes.forEach(function(elt, index, arr) {
        var covering, disjoint;
        if (!this.has_joint_instance(elt)) {
          if (index === 0) {
            disjoint = this.disjoint;
            covering = this.covering;
          } else {
            disjoint = covering = false;
          }
          return this.joint.push(factory.create_generalization(this.parent_class.get_classid(), elt.get_classid(), csstheme.css_links, disjoint, covering));
        }
      }, this);
    }
  };

  Generalization.prototype.has_joint_instance = function(elt) {
    var classid, founded;
    classid = elt.get_classid();
    founded = this.joint.find(function(elt, index, arr) {
      return elt.get('source').id === classid;
    });
    return founded != null;
  };

  Generalization.prototype.get_joint_for_child = function(classchild) {
    var classid, founded;
    classid = classchild.get_classid();
    founded = this.joint.find(function(elt, index, arr) {
      return elt.get('source').id === classid;
    });
    return founded;
  };

  Generalization.prototype.has_parent = function(parentclass) {
    return this.parent_class === parentclass;
  };

  Generalization.prototype.add_child = function(childclass) {
    return this.classes.push(childclass);
  };

  Generalization.prototype.set_disjoint = function(disjoint1) {
    this.disjoint = disjoint1;
  };

  Generalization.prototype.set_covering = function(covering1) {
    this.covering = covering1;
  };

  Generalization.prototype.get_disjoint = function() {
    return this.disjoint;
  };

  Generalization.prototype.get_covering = function() {
    return this.covering;
  };

  Generalization.prototype.to_json = function() {
    var constraint, json;
    json = Generalization.__super__.to_json.call(this);
    json.parent = this.parent_class.get_name();
    json.multiplicity = null;
    json.type = "generalization";
    constraint = [];
    if (this.disjoint) {
      constraint.push("disjoint");
    }
    if (this.covering) {
      constraint.push("covering");
    }
    json.constraint = constraint;
    return json;
  };

  return Generalization;

})(Link);

LinkWithClass = (function(superClass) {
  extend(LinkWithClass, superClass);

  function LinkWithClass(classes, name) {
    this.classes = classes;
    LinkWithClass.__super__.constructor.call(this, this.classes, name);
    this.mult = [null, null];
    this.assoc_class = new Class(name);
    this.j_assoc_link = null;
    this.j_assoc_class = null;
  }

  LinkWithClass.prototype.create_joint = function(factory, csstheme) {
    if (csstheme == null) {
      csstheme = null;
    }
    LinkWithClass.__super__.create_joint.call(this, factory, csstheme);
    this.j_assoc_class = this.assoc_class.get_joint(factory, csstheme)[0];
    this.j_assoc_link = factory.create_association_link(csstheme.css_assoc_links);
    this.joint.push(this.j_assoc_link);
    this.joint.push(this.j_assoc_class);
    this.classes[0].attach_on_change_position(this);
    return this.classes[1].attach_on_change_position(this);
  };

  LinkWithClass.prototype.update_position = function() {
    var middlex, middley, source_pos, source_size, target_pos, target_size;
    if ((this.j_assoc_link != null) && (this.j_assoc_class != null)) {
      this.j_assoc_link.set('source', {
        id: this.classes[0].get_joint()[0].id
      });
      this.j_assoc_link.set('target', {
        id: this.classes[1].get_joint()[0].id
      });
      target_pos = this.classes[1].get_joint()[0].position();
      source_pos = this.classes[0].get_joint()[0].position();
      target_size = this.classes[1].get_joint()[0].attributes.size;
      source_size = this.classes[0].get_joint()[0].attributes.size;
      middlex = Math.abs(target_pos.x + source_pos.x + target_size.width / 2 + source_size.width / 2) / 2;
      middley = Math.abs(target_pos.y + source_pos.y + target_size.height / 2 + source_size.height / 2) / 2;
      this.j_assoc_class.position(middlex, middley + 100);
      this.j_assoc_link.set('source', {
        x: middlex,
        y: middley
      });
      return this.j_assoc_link.set('target', {
        id: this.j_assoc_class.id
      });
    }
  };

  LinkWithClass.prototype.to_json = function() {
    var json;
    json = LinkWithClass.__super__.to_json.call(this);
    json.associated_class = this.assoc_class.to_json();
    return json;
  };

  return LinkWithClass;

})(Link);

LinkAttrToEntity = (function(superClass) {
  extend(LinkAttrToEntity, superClass);

  function LinkAttrToEntity(classes, name) {
    this.classes = classes;
    if (name == null) {
      name = null;
    }
    LinkAttrToEntity.__super__.constructor.call(this, this.classes, name);
  }

  LinkAttrToEntity.prototype.get_name = function() {
    return this.name;
  };

  LinkAttrToEntity.prototype.create_joint = function(factory, csstheme) {
    if (csstheme == null) {
      csstheme = null;
    }
    if (this.joint === null) {
      this.joint = [];
      if (csstheme !== null) {
        return this.joint.push(factory.create_link_attribute(this.classes[0].get_classid(), this.classes[1].get_attributeid(), this.name, csstheme.css_links));
      } else {
        return this.joint.push(factory.create_link_attribute(this.classes[0].get_classid(), this.classes[1].get_attributeid(), this.name, null));
      }
    }
  };

  LinkAttrToEntity.prototype.to_json = function() {
    var json;
    json = LinkAttrToEntity.__super__.to_json.call(this);
    delete json.multiplicity;
    delete json.roles;
    json.type = "attribute";
    return json;
  };

  return LinkAttrToEntity;

})(Link);

LinkISAToEntity = (function(superClass) {
  extend(LinkISAToEntity, superClass);

  function LinkISAToEntity(classes, name) {
    this.classes = classes;
    if (name == null) {
      name = null;
    }
    LinkISAToEntity.__super__.constructor.call(this, this.classes, name);
  }

  LinkISAToEntity.prototype.get_name = function() {
    return this.name;
  };

  LinkISAToEntity.prototype.create_joint = function(factory, csstheme) {
    if (csstheme == null) {
      csstheme = null;
    }
    if (this.joint === null) {
      this.joint = [];
      if (csstheme !== null) {
        return this.joint.push(factory.create_link_attribute(this.classes[0].get_classid(), this.classes[1].get_isaid(), this.name, csstheme.css_links));
      } else {
        return this.joint.push(factory.create_link_attribute(this.classes[0].get_classid(), this.classes[1].get_isaid(), this.name, null));
      }
    }
  };

  LinkISAToEntity.prototype.to_json = function() {
    var json;
    json = LinkISAToEntity.__super__.to_json.call(this);
    json.type = "isa";
    return json;
  };

  return LinkISAToEntity;

})(LinkAttrToEntity);

exports = exports != null ? exports : this;

exports.MyModel = MyModel;

exports.Class = Class;

exports.Link = Link;

exports.Generalization = Generalization;

exports.LinkWithClass = LinkWithClass;

exports.LinkAttrToEntity = LinkAttrToEntity;

exports.LinkISAToEntity = LinkISAToEntity;
