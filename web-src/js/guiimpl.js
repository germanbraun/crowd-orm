// Generated by CoffeeScript 1.4.0
var GUIIMPL, exports;

GUIIMPL = (function() {

  function GUIIMPL(graph, paper) {
    this.graph = graph;
    this.paper = paper;
    gui.set_current_instance(this);
  }

  GUIIMPL.prototype.set_urlprefix = function(str) {};

  GUIIMPL.prototype.to_metamodel = function() {};

  GUIIMPL.prototype.switch_to_erd = function() {};

  GUIIMPL.prototype.to_erd = function() {};

  GUIIMPL.prototype.update_metamodel = function(data) {};

  GUIIMPL.prototype.on_cell_clicked = function(cellview, event, x, y) {};

  GUIIMPL.prototype.set_options_classid = function(model_id) {};

  GUIIMPL.prototype.hide_options = function() {};

  GUIIMPL.prototype.set_editclass_classid = function(model_id) {};

  GUIIMPL.prototype.add_object_type = function(hash_data) {};

  GUIIMPL.prototype.add_attribute = function(hash_data, class_id) {};

  GUIIMPL.prototype.add_relationship_attr = function(class_id, attribute_id, name) {};

  GUIIMPL.prototype.delete_class = function(class_id) {};

  GUIIMPL.prototype.edit_class_name = function(class_id, name) {};

  GUIIMPL.prototype.add_relationship = function(class_a_id, class_b_id, name, mult) {};

  GUIIMPL.prototype.add_subsumption = function(class_parent_id, class_child_id, disjoint, covering) {};

  GUIIMPL.prototype.show_error = function(status, error) {};

  GUIIMPL.prototype.traffic_light_green = function() {};

  GUIIMPL.prototype.traffic_light_red = function() {};

  GUIIMPL.prototype.update_satisfiable = function(data) {};

  GUIIMPL.prototype.set_trafficlight = function(obj) {};

  GUIIMPL.prototype.set_unsatisfiable = function(classes_list) {};

  GUIIMPL.prototype.set_satisfiable = function(classes_list) {};

  GUIIMPL.prototype.check_satisfiable = function() {};

  GUIIMPL.prototype.update_translation = function(data) {};

  GUIIMPL.prototype.translate_owllink = function() {};

  GUIIMPL.prototype.change_to_details_page = function() {};

  GUIIMPL.prototype.change_to_diagram_page = function() {};

  GUIIMPL.prototype.hide_toolbar = function() {};

  GUIIMPL.prototype.hide_umldiagram_page = function() {};

  GUIIMPL.prototype.show_umldiagram_page = function() {};

  GUIIMPL.prototype.hide_eerdiagram_page = function() {};

  GUIIMPL.prototype.show_eerdiagram_page = function() {};

  GUIIMPL.prototype.set_association_state = function(class_id, mult) {};

  GUIIMPL.prototype.set_isa_state = function(class_id, disjoint, covering) {
    if (disjoint == null) {
      disjoint = false;
    }
    if (covering == null) {
      covering = false;
    }
  };

  GUIIMPL.prototype.set_selection_state = function() {};

  GUIIMPL.prototype.show_export_json = function() {};

  GUIIMPL.prototype.refresh_export_json = function() {};

  GUIIMPL.prototype.show_import_json = function() {};

  GUIIMPL.prototype.show_insert_owllink = function() {};

  GUIIMPL.prototype.set_insert_owllink = function(str) {};

  GUIIMPL.prototype.diag_to_json = function() {};

  GUIIMPL.prototype.import_jsonstr = function(jsonstr) {};

  GUIIMPL.prototype.import_json = function(json_obj) {};

  GUIIMPL.prototype.reset_all = function() {};

  return GUIIMPL;

})();

exports = exports != null ? exports : this;

if (exports.gui === void 0) {
  exports.gui = {};
}

exports.gui.gui_instance = null;

exports.gui.set_current_instance = function(gui_instance) {
  return exports.gui.gui_instance = gui_instance;
};

exports.gui.update_satisfiable = function(data) {
  return exports.gui.gui_instance.update_satisfiable(data);
};

exports.gui.update_translation = function(data) {
  return exports.gui.gui_instance.update_translation(data);
};

exports.gui.show_error = function(jqXHR, status, text) {
  return exports.gui.gui_instance.show_error(status + ": " + text, jqXHR.responseText);
};

exports = exports != null ? exports : this;

exports.gui.GUIIMPL = GUIIMPL;
