// Generated by CoffeeScript 1.10.0
(function() {
  var GUI, exports, ref;

  exports = exports != null ? exports : this;

  exports.gui = (ref = exports.gui) != null ? ref : {};

  GUI = (function() {
    function GUI(graph1, paper1) {
      this.graph = graph1;
      this.paper = paper1;
      this.current_gui = null;
      this.prev_gui = null;
      this.lst_guis = {};
      this.aux_gui = [];
      this.loginwidget = new login.LoginWidgetView({
        el: $("#loginwidget_placer")
      });
      this.errorwidget = new views.ErrorWidgetView({
        el: $("#errorwidget_placer")
      });
      this.owllinkinsert = new views.OWLlinkInsertView({
        el: $("#owllink_placer")
      });
      this.exportjsonwidget = new views.ExportJSONView({
        el: $("#exportjson_placer")
      });
      this.importjsonwidget = new views.ImportJSONView({
        el: $("#importjsonwidget_placer")
      });
      this.donewidget = new views.DoneWidget({
        el: $("#donewidget")
      });
      $("#details-page").enhanceWithin();
    }

    GUI.prototype.add_gui = function(name, guiimp) {
      this.lst_guis[name] = guiimp;
      guiimp.set_graph(this.graph);
      guiimp.set_paper(this.paper);
      return this.switch_to_gui(name);
    };

    GUI.prototype.to_erd = function() {
      return this.current_gui.to_erd(this);
    };

    GUI.prototype.to_metamodel = function() {};

    GUI.prototype.switch_to_gui = function(name) {
      if (this.lst_guis[name] != null) {
        this.prev_gui = this.current_gui;
        return this.current_gui = this.lst_guis[name];
      }
    };

    GUI.prototype.set_previous = function(name) {
      if (this.lst_guis[name] != null) {
        return this.prev_gui = this.lst_guis[name];
      }
    };

    GUI.prototype.set_prev_gui = function(guiimp) {
      this.prev_gui = guiimp;
      guiimp.graph = this.graph;
      return guiimp.paper = this.paper;
    };

    GUI.prototype.switch_to_prev = function() {
      this.aux_gui = this.current_gui;
      this.current_gui = this.prev_gui;
      return this.prev_gui = this.aux_gui;
    };

    GUI.prototype.switch_to_erd = function() {
      this.aux_gui = this.current_gui;
      this.current_gui = this.prev_gui;
      return this.prev_gui = this.aux_gui;
    };

    GUI.prototype.update_metamodel = function(data) {
      return this.current_gui.update_metamodel(data);
    };

    GUI.prototype.translate_formal = function(strategy, syntax) {
      return this.current_gui.translate_formal(strategy, syntax);
    };

    GUI.prototype.translate_owllink = function() {
      return this.current_gui.translate_owllink(this);
    };

    GUI.prototype.update_translation = function(data) {
      return this.current_gui.update_translation(data);
    };

    GUI.prototype.add_object_type = function(name) {
      return this.current_gui.add_object_type(name);
    };

    GUI.prototype.add_attribute = function(name) {
      return this.current_gui.add_attribute(name);
    };

    GUI.prototype.add_relationship = function(class_a_id, class_b_id, name, mult, roles) {
      return this.current_gui.add_relationship(class_a_id, class_b_id, name, mult, roles);
    };

    GUI.prototype.add_relationship_attr = function(class_id, attribute_id, name) {
      return this.current_gui.add_relationship_attr(class_id, attribute_id, name);
    };

    GUI.prototype.add_relationship_isa = function(class_id, isa_id, name) {
      return this.current_gui.add_relationship_isa(class_id, isa_id, name);
    };

    GUI.prototype.add_relationship_isa_inverse = function(class_id, isa_id, name) {
      return this.current_gui.add_relationship_isa_inverse(class_id, isa_id, name);
    };

    GUI.prototype.add_subsumption = function(class_parent_id, class_child_id, disjoint, covering) {
      return this.current_gui.add_subsumption(class_parent_id, class_child_id, disjoint, covering);
    };

    GUI.prototype.edit_class_name = function(class_id, name) {
      return this.current_gui.edit_class_name(class_id, name);
    };

    GUI.prototype.delete_class = function(class_id) {
      return this.current_gui.delete_class(class_id);
    };

    GUI.prototype.delete_attr = function(attr_id) {
      return this.current_gui.delete_attr(attr_id);
    };

    GUI.prototype.set_isa_state = function(class_id, disjoint, covering) {
      return this.current_gui.set_isa_state(class_id, disjoint, covering);
    };

    GUI.prototype.set_options_classid = function(model_id) {
      return this.current_gui.set_options_classid(model_id);
    };

    GUI.prototype.set_association_state = function(class_id, mult, roles, name) {
      return this.current_gui.set_association_state(class_id, mult, roles, name);
    };

    GUI.prototype.hide_options = function() {
      return this.current_gui.hide_options();
    };

    GUI.prototype.clear_relationship = function() {
      return this.current_gui.clear_relationship();
    };

    GUI.prototype.hide_toolbar = function() {
      return $("#tools-panel [data-rel=close]").click();
    };

    GUI.prototype.hide_umldiagram_page = function() {
      return this.current_gui.hide_umldiagram_page();
    };

    GUI.prototype.show_umldiagram_page = function() {
      return this.current_gui.show_umldiagram_page();
    };

    GUI.prototype.hide_eerdiagram_page = function() {
      return this.current_gui.eerdiagram_page();
    };

    GUI.prototype.show_eerdiagram_page = function() {
      return this.current_gui.eerdiagram_page();
    };

    GUI.prototype.set_editclass_classid = function(model_id) {
      return this.current_gui.set_editclass_classid(model_id);
    };

    GUI.prototype.set_selection_state = function() {
      return this.current_gui.set_selection_state();
    };

    GUI.prototype.show_export_json = function() {
      this.exportjsonwidget.set_jsonstr(this.current_gui.diag_to_json());
      $(".exportjson_details").collapsible("expand");
      return this.change_to_details_page();
    };

    GUI.prototype.refresh_export_json = function() {
      return this.exportjsonwidget.set_jsonstr(this.current_gui.diag_to_json());
    };

    GUI.prototype.show_insert_owllink = function() {
      return this.change_to_details_page();
    };

    GUI.prototype.change_to_details_page = function() {
      return $.mobile.changePage("#details-page", {
        transition: "slide"
      });
    };

    GUI.prototype.change_to_diagram_page = function() {
      return $.mobile.changePage("#diagram-page", {
        transition: "slide",
        reverse: true
      });
    };

    GUI.prototype.on_cell_clicked = function(cellview, event, x, y) {
      return this.current_gui.on_cell_clicked(cellview, event, x, y);
    };

    GUI.prototype.import_jsonstr = function(jsonstr) {
      var json;
      json = JSON.parse(jsonstr);
      return this.import_json(json);
    };

    GUI.prototype.show_import_json = function() {
      this.hide_toolbar();
      return this.importjsonwidget.show();
    };

    GUI.prototype.reset_all = function() {
      this.owllinkinsert.set_owllink("");
      return this.current_gui.reset_all();
    };

    GUI.prototype.check_satisfiable = function() {
      return this.current_gui.check_satisfiable();
    };

    GUI.prototype.update_satisfiable = function(data) {
      return this.current_gui.update_satisfiable(data);
    };

    GUI.prototype.show_error = function(status, error) {
      $.mobile.loading("hide");
      return this.errorwidget.show(status, error);
    };

    GUI.prototype.set_insert_owllink = function(str) {
      return this.owllinkinsert.set_owllink(str);
    };

    GUI.prototype.show_donewidget = function(cellid, callback) {
      var left, top, viewpos;
      if (callback == null) {
        callback = null;
      }
      viewpos = graph.getCell(cellid).findView(paper).getBBox();
      top = viewpos.y + viewpos.height * 2;
      left = viewpos.x + viewpos.width / 2;
      return this.donewidget.show({
        x: left,
        y: top
      }, callback);
    };

    return GUI;

  })();

  exports.gui.gui_instance = null;

  exports.gui.set_current_instance = function(gui_instance) {
    return exports.gui.gui_instance = gui_instance;
  };

  exports.gui.switch_to_erd = function() {
    gui_instance.aux_gui = gui_instance.current_gui;
    gui_instance.current_gui = gui_instance.prev_gui;
    return gui_instance.prev_gui = gui_instance.aux_gui;
  };

  exports.gui.update_satisfiable = function(data) {
    return exports.gui.gui_instance.update_satisfiable(data);
  };

  exports.gui.update_translation = function(data) {
    return exports.gui.gui_instance.update_translation(data);
  };

  exports.gui.show_error = function(jqXHR, status, text) {
    return exports.gui.gui_instance.show_error(status + ": " + text, jqXHR.responseText);
  };

  exports.gui.GUI = GUI;

}).call(this);
// Generated by CoffeeScript 1.10.0
(function() {
  var GUIIMPL, exports, ref;

  exports = exports != null ? exports : this;

  exports.gui = (ref = exports.gui) != null ? ref : {};

  GUIIMPL = (function() {
    function GUIIMPL(graph1, paper1) {
      this.graph = graph1 != null ? graph1 : null;
      this.paper = paper1 != null ? paper1 : null;
      gui.set_current_instance(this);
      this.diag = null;
    }

    GUIIMPL.prototype.set_graph = function(graph) {
      this.graph = graph;
      if (this.diag != null) {
        return this.diag.set_graph(this.graph);
      }
    };

    GUIIMPL.prototype.set_paper = function(paper) {
      return this.paper = paper;
    };

    GUIIMPL.prototype.set_urlprefix = function(str) {};

    GUIIMPL.prototype.to_metamodel = function() {};

    GUIIMPL.prototype.switch_to_erd = function() {};

    GUIIMPL.prototype.to_erd = function() {};

    GUIIMPL.prototype.update_translation = function(data) {};

    GUIIMPL.prototype.update_metamodel = function(data) {};

    GUIIMPL.prototype.on_cell_clicked = function(cellview, event, x, y) {};

    GUIIMPL.prototype.set_options_classid = function(model_id) {};

    GUIIMPL.prototype.hide_options = function() {};

    GUIIMPL.prototype.clear_relationship = function() {};

    GUIIMPL.prototype.set_editclass_classid = function(model_id) {};

    GUIIMPL.prototype.add_object_type = function(hash_data) {};

    GUIIMPL.prototype.add_attribute = function(hash_data, class_id) {};

    GUIIMPL.prototype.add_relationship_attr = function(class_id, attribute_id, name) {};

    GUIIMPL.prototype.delete_class = function(class_id) {};

    GUIIMPL.prototype.edit_class_name = function(class_id, name) {};

    GUIIMPL.prototype.add_relationship = function(class_a_id, class_b_id, name, mult) {};

    GUIIMPL.prototype.add_subsumption = function(class_parent_id, class_child_id, disjoint, covering) {};

    GUIIMPL.prototype.show_error = function(status, error) {};

    GUIIMPL.prototype.traffic_light_green = function() {};

    GUIIMPL.prototype.traffic_light_red = function() {};

    GUIIMPL.prototype.update_satisfiable = function(data) {};

    GUIIMPL.prototype.set_trafficlight = function(obj) {};

    GUIIMPL.prototype.set_unsatisfiable = function(classes_list) {};

    GUIIMPL.prototype.set_satisfiable = function(classes_list) {};

    GUIIMPL.prototype.check_satisfiable = function() {};

    GUIIMPL.prototype.update_translation = function(data) {};

    GUIIMPL.prototype.translate_formal = function(strategy, syntax) {};

    GUIIMPL.prototype.translate_owllink = function() {};

    GUIIMPL.prototype.change_to_details_page = function() {};

    GUIIMPL.prototype.change_to_diagram_page = function() {};

    GUIIMPL.prototype.hide_toolbar = function() {};

    GUIIMPL.prototype.hide_umldiagram_page = function() {};

    GUIIMPL.prototype.show_umldiagram_page = function() {};

    GUIIMPL.prototype.hide_eerdiagram_page = function() {};

    GUIIMPL.prototype.show_eerdiagram_page = function() {};

    GUIIMPL.prototype.set_association_state = function(class_id, mult) {};

    GUIIMPL.prototype.set_isa_state = function(class_id, disjoint, covering) {
      if (disjoint == null) {
        disjoint = false;
      }
      if (covering == null) {
        covering = false;
      }
    };

    GUIIMPL.prototype.set_selection_state = function() {};

    GUIIMPL.prototype.show_export_json = function() {};

    GUIIMPL.prototype.refresh_export_json = function() {};

    GUIIMPL.prototype.show_import_json = function() {};

    GUIIMPL.prototype.show_insert_owllink = function() {};

    GUIIMPL.prototype.set_insert_owllink = function(str) {};

    GUIIMPL.prototype.diag_to_json = function() {};

    GUIIMPL.prototype.import_jsonstr = function(jsonstr) {
      var json;
      json = JSON.parse(jsonstr);
      return this.import_json(json);
    };

    GUIIMPL.prototype.import_json = function(json_obj) {};

    GUIIMPL.prototype.reset_all = function() {};

    return GUIIMPL;

  })();

  exports.gui.GUIIMPL = GUIIMPL;

}).call(this);
// Generated by CoffeeScript 1.10.0
(function() {
  var GUIUML, exports, ref,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  exports = exports != null ? exports : this;

  exports.gui = (ref = exports.gui) != null ? ref : {};

  GUIUML = (function(superClass) {
    extend(GUIUML, superClass);

    function GUIUML(graph, paper) {
      this.graph = graph != null ? graph : null;
      this.paper = paper != null ? paper : null;
      this.urlprefix = "";
      this.diag = new model.uml.UMLDiagram(this.graph);
      this.state = gui.get_state().selection_state();
      this.crearclase = new views.CreateClassView({
        el: $("#crearclase")
      });
      this.editclass = new views.EditClassView({
        el: $("#editclass")
      });
      this.classoptions = new views.ClassOptionsView({
        el: $("#classoptions")
      });
      this.relationoptions = new views.RelationOptionsView({
        el: $("#relationoptions")
      });
      this.isaoptions = new views.IsaOptionsView({
        el: $("#isaoptions")
      });
      this.toolbar = new views.ToolsUML({
        el: $("#lang_tools")
      });
      this.trafficlight = new views.TrafficLightsView({
        el: $("#trafficlight")
      });
      this.serverconn = new ServerConnection(function(jqXHR, status, text) {
        return exports.gui.gui_instance.show_error(status + ": " + text, jqXHR.responseText);
      });
      $("#diagram-page").enhanceWithin();
    }

    GUIUML.prototype.set_urlprefix = function(str) {
      return this.urlprefix = str;
    };

    GUIUML.prototype.on_cell_clicked = function(cellview, event, x, y) {
      return this.state.on_cell_clicked(cellview, event, x, y, this);
    };

    GUIUML.prototype.set_options_classid = function(model_id) {
      this.relationoptions.set_classid(model_id);
      this.classoptions.set_classid(model_id);
      return this.isaoptions.set_classid(model_id);
    };

    GUIUML.prototype.hide_options = function() {
      this.classoptions.hide();
      this.relationoptions.hide();
      this.editclass.hide();
      return this.isaoptions.hide();
    };

    GUIUML.prototype.set_editclass_classid = function(model_id) {
      return this.editclass.set_classid(model_id);
    };

    GUIUML.prototype.add_object_type = function(hash_data) {
      gui.gui_instance.hide_toolbar();
      return this.diag.add_class(hash_data);
    };

    GUIUML.prototype.add_attribute = function(hash_data) {};

    GUIUML.prototype.delete_class = function(class_id) {
      return this.diag.delete_class_by_classid(class_id);
    };

    GUIUML.prototype.edit_class_name = function(class_id, name) {
      this.diag.rename_class(class_id, name);
      return this.diag.update_view(class_id, this.paper);
    };

    GUIUML.prototype.add_relationship = function(class_a_id, class_b_id, name, mult) {
      if (name == null) {
        name = null;
      }
      if (mult == null) {
        mult = null;
      }
      this.diag.add_association(class_a_id, class_b_id, name, mult);
      return this.set_selection_state();
    };

    GUIUML.prototype.add_relationship_attr = function() {};

    GUIUML.prototype.add_subsumption = function(class_parent_id, class_child_id, disjoint, covering) {
      if (disjoint == null) {
        disjoint = false;
      }
      if (covering == null) {
        covering = false;
      }
      return this.diag.add_generalization(class_parent_id, class_child_id, disjoint, covering);
    };

    GUIUML.prototype.traffic_light_green = function() {
      return this.trafficlight.turn_green();
    };

    GUIUML.prototype.traffic_light_red = function() {
      return this.trafficlight.turn_red();
    };

    GUIUML.prototype.update_satisfiable = function(data) {
      var obj;
      console.log(data);
      obj = JSON.parse(data);
      this.set_trafficlight(obj);
      $("#reasoner_input").html(obj.reasoner.input);
      $("#reasoner_output").html(obj.reasoner.output);
      $.mobile.loading("hide");
      this.set_unsatisfiable(obj.unsatisfiable.classes);
      return this.set_satisfiable(obj.satisfiable.classes);
    };

    GUIUML.prototype.set_trafficlight = function(obj) {
      if (obj.satisfiable.kb) {
        if (obj.unsatisfiable.classes.length === 0) {
          return this.trafficlight.turn_green();
        } else {
          return this.trafficlight.turn_yellow();
        }
      } else {
        return this.trafficlight.turn_red();
      }
    };

    GUIUML.prototype.set_unsatisfiable = function(classes_list) {
      return this.diag.set_unsatisfiable(classes_list);
    };

    GUIUML.prototype.set_satisfiable = function(classes_list) {
      return this.diag.set_satisfiable(classes_list);
    };

    GUIUML.prototype.check_satisfiable = function() {
      $.mobile.loading("show", {
        text: "Consulting server...",
        textVisible: true,
        textonly: false
      });
      return this.serverconn.request_satisfiable(this.diag_to_json(), (function(_this) {
        return function(data) {
          return exports.gui.gui_instance.update_satisfiable(data);
        };
      })(this));
    };

    GUIUML.prototype.update_translation = function(data) {
      var format;
      console.log(data);
      format = this.crearclase.get_translation_format();
      if (format === "html") {
        $("#html-output").html(data);
        $("#html-output").show();
        $("#owllink_source").hide();
      } else {
        $("#owllink_source").text(data);
        $("#owllink_source").show();
        $("#html-output").hide();
      }
      $.mobile.loading("hide");
      return gui.gui_instance.change_to_details_page();
    };

    GUIUML.prototype.update_metamodel = function(data) {
      console.log(data);
      $("#owllink_source").text(data);
      $("#owllink_source").show();
      $("#html-output").hide();
      $.mobile.loading("hide");
      return gui.gui_instance.change_to_details_page();
    };

    GUIUML.prototype.translate_formal = function(strategy, syntax) {
      var json;
      $.mobile.loading("show", {
        text: "Consulting server...",
        textVisible: true,
        textonly: false
      });
      json = JSON.stringify(this.diag.to_json());
      return this.serverconn.request_translation(json, syntax, strategy, function(data) {
        return gui.gui_instance.update_translation(data);
      });
    };

    GUIUML.prototype.translate_owllink = function(gui_instance) {
      var format, strat;
      format = this.crearclase.get_translation_format();
      strat = this.crearclase.get_translation_strategy();
      return this.translate_formal(strat, format);
    };

    GUIUML.prototype.hide_umldiagram_page = function() {
      return $("#diagram-page").css("display", "none");
    };

    GUIUML.prototype.show_umldiagram_page = function() {
      return $("#diagram-page").css("display", "block");
    };

    GUIUML.prototype.set_association_state = function(class_id, mult) {
      this.hide_options();
      this.state = gui.state_inst.association_state();
      this.state.set_cellStarter(class_id);
      return this.state.set_cardinality(mult);
    };

    GUIUML.prototype.set_isa_state = function(class_id, disjoint, covering) {
      if (disjoint == null) {
        disjoint = false;
      }
      if (covering == null) {
        covering = false;
      }
      this.hide_options();
      gui.gui_instance.show_donewidget(class_id, (function(_this) {
        return function() {
          return _this.set_selection_state();
        };
      })(this));
      this.state = gui.state_inst.isa_state();
      this.state.set_cellStarter(class_id);
      return this.state.set_constraint(disjoint, covering);
    };

    GUIUML.prototype.set_selection_state = function() {
      return this.state = gui.state_inst.selection_state();
    };

    GUIUML.prototype.diag_to_json = function() {
      var json;
      json = this.diag.to_json();
      return JSON.stringify(json);
    };

    GUIUML.prototype.import_json = function(json_obj) {
      return this.diag.import_json(json_obj);
    };

    GUIUML.prototype.reset_all = function() {
      this.diag.reset();
      return gui.gui_instance.hide_toolbar();
    };

    GUIUML.prototype.to_metamodel = function() {
      var json;
      $.mobile.loading("show", {
        text: "Metamodelling...",
        textVisible: true,
        textonly: false
      });
      json = JSON.stringify(this.diag.to_json());
      return this.serverconn.request_metamodel_translation(json, this.update_metamodel);
    };

    GUIUML.prototype.to_erd = function(gui_instance) {
      var json;
      $.mobile.loading("show", {
        text: "Generating ER Diagram...",
        textVisible: true,
        textonly: false
      });
      gui_instance.hide_toolbar();
      gui_instance.switch_to_erd();
      json = JSON.stringify(this.diag.to_json());
      this.serverconn.request_meta2erd_translation(json, function(data) {
        return gui_instance.import_jsonstr(data);
      });
      return $.mobile.loading("hide");
    };

    return GUIUML;

  })(gui.GUIIMPL);

  exports.gui.GUIUML = GUIUML;

}).call(this);
// Generated by CoffeeScript 1.10.0
(function() {
  var GUIEER, exports, ref,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  exports = exports != null ? exports : this;

  exports.gui = (ref = exports.gui) != null ? ref : {};

  GUIEER = (function(superClass) {
    extend(GUIEER, superClass);

    function GUIEER(graph, paper) {
      this.graph = graph;
      this.paper = paper;
      this.urlprefix = "";
      this.diag = new model.eer.ERDiagram(this.graph);
      this.state = gui.get_state().selection_state();
      this.eerview = new views.eer.CreateEERView({
        el: $("#crearclase")
      });
      this.toolbar = new views.eer.ToolsEERView({
        el: $("#lang_tools")
      });
      this.editclass = new views.EditClassView({
        el: $("#editclass")
      });
      this.classoptions = new views.ClassOptionsView({
        el: $("#classoptions")
      });
      this.relationoptions = new views.eer.RelationOptionsEERView({
        el: $("#relationoptions")
      });
      this.isaoptions = new views.common.SubsumptionOptionsView({
        el: $("#isaoptions")
      });
      this.attroptions = new views.eer.AttrOptionsEERView({
        el: $("#attroptions")
      });
      this.trafficlight = new views.common.TrafficLightsView({
        el: $("#trafficlight")
      });
      this.serverconn = new ServerConnection(function(jqXHR, status, text) {
        return exports.gui.gui_instance.show_error(status + ": " + text, jqXHR.responseText);
      });
      $("#diagram-page").enhanceWithin();
    }

    GUIEER.prototype.set_urlprefix = function(str) {
      return this.urlprefix = str;
    };

    GUIEER.prototype.on_cell_clicked = function(cellview, event, x, y) {
      return this.state.on_cell_clicked(cellview, event, x, y, this);
    };

    GUIEER.prototype.set_options_classid = function(model_id) {
      this.relationoptions.set_classid(model_id);
      this.classoptions.set_classid(model_id);
      this.isaoptions.set_classid(model_id);
      return this.attroptions.set_attrid(model_id);
    };

    GUIEER.prototype.hide_options = function() {
      this.classoptions.hide();
      this.relationoptions.hide();
      this.editclass.hide();
      this.isaoptions.hide();
      return this.attroptions.hide();
    };

    GUIEER.prototype.clear_relationship = function() {
      return this.relationoptions.clear();
    };

    GUIEER.prototype.set_editclass_classid = function(model_id) {
      return this.editclass.set_classid(model_id);
    };

    GUIEER.prototype.add_object_type = function(hash_data) {
      this.hide_toolbar();
      return this.diag.add_entity(hash_data);
    };

    GUIEER.prototype.add_attribute = function(hash_data) {
      this.hide_toolbar();
      return this.diag.add_attribute(hash_data);
    };

    GUIEER.prototype.delete_class = function(class_id) {
      return this.diag.delete_class_by_classid(class_id);
    };

    GUIEER.prototype.delete_attr = function(attr_id) {
      return this.diag.delete_attr_by_attrid(attr_id);
    };

    GUIEER.prototype.edit_class_name = function(class_id, name) {
      this.diag.rename_class(class_id, name);
      return this.diag.update_view(class_id, this.paper);
    };

    GUIEER.prototype.add_relationship = function(class_a_id, class_b_id, name, mult, roles) {
      if (name == null) {
        name = null;
      }
      if (mult == null) {
        mult = null;
      }
      if (roles == null) {
        roles = null;
      }
      this.diag.add_association(class_a_id, class_b_id, name, mult, roles);
      this.set_selection_state();
      this.clear_relationship();
      return this.hide_options();
    };

    GUIEER.prototype.add_relationship_attr = function(class_id, attribute_id, name) {
      if (name == null) {
        name = null;
      }
      return this.diag.add_relationship_attr(class_id, attribute_id, name);
    };

    GUIEER.prototype.add_relationship_isa = function(class_id, isa_id, name) {
      return this.diag.add_relationship_isa(class_id, isa_id, name);
    };

    GUIEER.prototype.add_relationship_isa_inverse = function(class_id, isa_id, name) {
      if (name == null) {
        name = null;
      }
      return this.diag.add_relationship_isa_inverse(isa_id, class_id, name);
    };

    GUIEER.prototype.add_subsumption = function(class_parent_id, class_child_id, disjoint, covering) {
      var isa_id;
      if (disjoint == null) {
        disjoint = false;
      }
      if (covering == null) {
        covering = false;
      }
      this.diag.add_generalization(class_parent_id, class_child_id, disjoint, covering);
      isa_id = this.diag.get_last_isa_by_id();
      this.diag.add_relationship_isa(class_parent_id, isa_id);
      this.diag.add_relationship_isa_inverse(isa_id, class_child_id);
      this.set_selection_state();
      return this.hide_options();
    };

    GUIEER.prototype.show_error = function(status, error) {
      $.mobile.loading("hide");
      return this.errorwidget.show(status, error);
    };

    GUIEER.prototype.traffic_light_green = function() {
      return this.trafficlight.turn_green();
    };

    GUIEER.prototype.traffic_light_red = function() {
      return this.trafficlight.turn_red();
    };

    GUIEER.prototype.update_satisfiable = function(data) {
      var obj;
      console.log(data);
      obj = JSON.parse(data);
      this.set_trafficlight(obj);
      $("#reasoner_input").html(obj.reasoner.input);
      $("#reasoner_output").html(obj.reasoner.output);
      $.mobile.loading("hide");
      this.set_unsatisfiable(obj.unsatisfiable.classes);
      return this.set_satisfiable(obj.satisfiable.classes);
    };

    GUIEER.prototype.set_trafficlight = function(obj) {
      if (obj.satisfiable.kb) {
        if (obj.unsatisfiable.classes.length === 0) {
          return this.trafficlight.turn_green();
        } else {
          return this.trafficlight.turn_yellow();
        }
      } else {
        return this.trafficlight.turn_red();
      }
    };

    GUIEER.prototype.set_unsatisfiable = function(classes_list) {
      return this.diag.set_unsatisfiable(classes_list);
    };

    GUIEER.prototype.set_satisfiable = function(classes_list) {
      return this.diag.set_satisfiable(classes_list);
    };

    GUIEER.prototype.check_satisfiable = function() {
      $.mobile.loading("show", {
        text: "Consulting server...",
        textVisible: true,
        textonly: false
      });
      return this.serverconn.request_satisfiable(this.diag_to_json(), gui.update_satisfiable);
    };

    GUIEER.prototype.update_translation = function(data) {
      var format;
      format = this.crearclase.get_translation_format();
      if (format === "html") {
        $("#html-output").html(data);
        $("#html-output").show();
        $("#owllink_source").hide();
      } else {
        $("#owllink_source").text(data);
        $("#owllink_source").show();
        $("#html-output").hide();
      }
      $.mobile.loading("hide");
      this.change_to_details_page();
      return console.log(data);
    };

    GUIEER.prototype.translate_owllink = function() {
      var format, json;
      format = this.crearclase.get_translation_format();
      $.mobile.loading("show", {
        text: "Consulting server...",
        textVisible: true,
        textonly: false
      });
      json = this.diag_to_json();
      return this.serverconn.request_translation(json, format, gui.update_translation);
    };

    GUIEER.prototype.change_to_details_page = function() {
      return $.mobile.changePage("#details-page", {
        transition: "slide"
      });
    };

    GUIEER.prototype.change_to_diagram_page = function() {
      return $.mobile.changePage("#diagram-page", {
        transition: "slide",
        reverse: true
      });
    };

    GUIEER.prototype.hide_toolbar = function() {
      return $("#tools-panel [data-rel=close]").click();
    };

    GUIEER.prototype.hide_eerdiagram_page = function() {
      return $("#diagram-eer-page").css("display", "none");
    };

    GUIEER.prototype.show_eerdiagram_page = function() {
      return $("#diagram-eer-page").css("display", "block");
    };

    GUIEER.prototype.set_association_state = function(class_id, mult, roles, name) {
      this.state = gui.state_inst.association_state();
      this.state.set_cellStarter(class_id);
      this.state.set_cardinality(mult);
      this.state.set_roles(roles);
      return this.state.set_name(name);
    };

    GUIEER.prototype.set_isa_state = function(class_id, disjoint, covering) {
      if (disjoint == null) {
        disjoint = false;
      }
      if (covering == null) {
        covering = false;
      }
      this.state = gui.state_inst.isa_state();
      this.state.set_cellStarter(class_id);
      return this.state.set_constraint(disjoint, covering);
    };

    GUIEER.prototype.set_selection_state = function() {
      return this.state = gui.state_inst.selection_state();
    };

    GUIEER.prototype.show_export_json = function() {
      this.exportjsonwidget.set_jsonstr(this.diag_to_json());
      $(".exportjson_details").collapsible("expand");
      return this.change_to_details_page();
    };

    GUIEER.prototype.refresh_export_json = function() {
      return this.exportjsonwidget.set_jsonstr(this.diag_to_json());
    };

    GUIEER.prototype.show_import_json = function() {
      this.hide_toolbar();
      return this.importjsonwidget.show();
    };

    GUIEER.prototype.show_insert_owllink = function() {
      return this.change_to_details_page();
    };

    GUIEER.prototype.set_insert_owllink = function(str) {
      return this.owllinkinsert.set_owllink(str);
    };

    GUIEER.prototype.diag_to_json = function() {
      var json;
      json = this.diag.to_json();
      return JSON.stringify(json);
    };

    GUIEER.prototype.import_jsonstr = function(jsonstr) {
      var json;
      json = JSON.parse(jsonstr);
      this.owllinkinsert.append_owllink("\n" + json.owllink);
      return this.import_json(json);
    };

    GUIEER.prototype.import_json = function(json_obj) {
      return this.diag.import_json(json_obj);
    };

    GUIEER.prototype.reset_all = function() {
      this.diag.reset();
      this.owllinkinsert.set_owllink("");
      return this.hide_toolbar();
    };

    GUIEER.prototype.update_metamodel = function(data) {
      console.log(data);
      $("#owllink_source").text(data);
      $("#owllink_source").show();
      $("#html-output").hide();
      $.mobile.loading("hide");
      return this.change_to_details_page();
    };

    return GUIEER;

  })(gui.GUIIMPL);

  exports.gui.GUIEER = GUIEER;

}).call(this);
// Generated by CoffeeScript 1.10.0
(function() {
  var State, exports, ref;

  exports = exports != null ? exports : this;

  exports.gui = (ref = exports.gui) != null ? ref : {};

  State = (function() {
    function State() {
      this.selectionstate_inst = new gui.SelectionState();
      this.associationstate_inst = new gui.AssociationState();
      this.isastate_inst = new gui.IsAState();
    }

    State.prototype.on_cell_clicked = function(cellView, event, x, y, gui_instance) {};

    State.prototype.selection_state = function() {
      return this.selectionstate_inst;
    };

    State.prototype.association_state = function() {
      return this.associationstate_inst;
    };

    State.prototype.isa_state = function() {
      return this.isastate_inst;
    };

    return State;

  })();

  exports.gui.State = State;

  exports.gui.state_inst = null;

  exports.gui.get_state = function() {
    if (gui.state_inst == null) {
      gui.state_inst = new gui.State();
    }
    return gui.state_inst;
  };

}).call(this);
// Generated by CoffeeScript 1.10.0
(function() {
  var AssociationState, exports, ref,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  exports = exports != null ? exports : this;

  exports.gui = (ref = exports.gui) != null ? ref : {};

  AssociationState = (function(superClass) {
    extend(AssociationState, superClass);

    function AssociationState() {
      this.cell_starter = null;
      this.mult = null;
      this.with_class = false;
      this.name = null;
      this.roles = null;
    }

    AssociationState.prototype.reset = function() {
      this.cell_starter = null;
      this.with_class = false;
      return this.name = null;
    };

    AssociationState.prototype.set_cellStarter = function(cell_starter) {
      this.cell_starter = cell_starter;
    };

    AssociationState.prototype.set_mult = function(mult) {
      this.mult = mult;
    };

    AssociationState.prototype.set_roles = function(roles) {
      this.roles = roles;
    };

    AssociationState.prototype.set_cardinality = function(mult) {
      this.mult = mult;
    };

    AssociationState.prototype.set_name = function(name) {
      this.name = name;
    };

    AssociationState.prototype.set_with_class = function(with_class) {
      if (this.name != null) {
        return this.with_class = with_class;
      } else {
        return this.with_class = false;
      }
    };

    AssociationState.prototype.enable_with_class = function(name) {
      this.name = name;
      return this.with_class = true;
    };

    AssociationState.prototype.on_cell_clicked = function(cell_view, event, x, y, gui_instance) {
      if (this.with_class) {
        gui_instance.add_association_class(this.cell_starter, cell_view.model.id, this.name, this.mult, this.roles);
      } else {
        gui_instance.add_relationship(this.cell_starter, cell_view.model.id, this.name, this.mult, this.roles);
      }
      return this.reset();
    };

    return AssociationState;

  })(gui.State);

  exports.gui.AssociationState = AssociationState;

}).call(this);
// Generated by CoffeeScript 1.10.0
(function() {
  var IsAState, exports, ref,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  exports = exports != null ? exports : this;

  exports.gui = (ref = exports.gui) != null ? ref : {};

  IsAState = (function(superClass) {
    extend(IsAState, superClass);

    function IsAState() {
      this.reset();
    }

    IsAState.prototype.reset = function() {
      this.disjoint = false;
      this.covering = false;
      return this.cell_starter = null;
    };

    IsAState.prototype.set_cellStarter = function(cell_starter) {
      this.cell_starter = cell_starter;
    };

    IsAState.prototype.set_constraint = function(disjoint, covering) {
      this.disjoint = disjoint;
      this.covering = covering;
    };

    IsAState.prototype.set_disjoint = function(disjoint) {
      this.disjoint = disjoint;
    };

    IsAState.prototype.set_covering = function(covering) {
      this.covering = covering;
    };

    IsAState.prototype.on_cell_clicked = function(cell_view, event, x, y, gui_instance) {
      return gui_instance.add_subsumption(this.cell_starter, cell_view.model.id, this.disjoint, this.covering);
    };

    return IsAState;

  })(gui.State);

  exports.gui.IsAState = IsAState;

}).call(this);
// Generated by CoffeeScript 1.10.0
(function() {
  var SelectionState, exports, ref,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  exports = exports != null ? exports : this;

  exports.gui = (ref = exports.gui) != null ? ref : {};

  SelectionState = (function(superClass) {
    extend(SelectionState, superClass);

    function SelectionState() {}

    SelectionState.prototype.on_cell_clicked = function(cellView, event, x, y, gui_instance) {
      if (cellView.highlighted === void 0 || cellView.highlighted === false) {
        cellView.highlight();
        cellView.highlighted = true;
        return gui_instance.set_options_classid(cellView.model.id);
      } else {
        cellView.unhighlight();
        cellView.highlighted = false;
        return gui_instance.hide_options();
      }
    };

    return SelectionState;

  })(gui.State);

  exports.gui.SelectionState = SelectionState;

}).call(this);
