// Generated by CoffeeScript 1.4.0
var GUI, exports;

GUI = (function() {

  function GUI(graph, paper) {
    this.graph = graph;
    this.paper = paper;
    this.current_gui = new GUIORM(this.graph, this.paper);
    this.prev_gui = new GUIEER(this.graph, this.paper);
    this.aux_gui = [];
    gui.set_current_instance(this);
  }

  GUI.prototype.to_erd = function() {
    return this.current_gui.to_erd(this);
  };

  GUI.prototype.to_metamodel = function() {};

  GUI.prototype.switch_to_erd = function() {
    this.aux_gui = this.current_gui;
    this.current_gui = this.prev_gui;
    return this.prev_gui = this.aux_gui;
  };

  GUI.prototype.update_metamodel = function(data) {
    return this.current_gui.update_metamodel(data);
  };

  GUI.prototype.translate_owllink = function() {
    return this.current_gui.translate_owllink();
  };

  GUI.prototype.update_translation = function() {};

  GUI.prototype.add_object_type = function(name) {
    return this.current_gui.add_object_type(name);
  };

  GUI.prototype.add_attribute = function(name) {
    return this.current_gui.add_attribute(name);
  };

  GUI.prototype.add_relationship = function(class_a_id, class_b_id, name, mult) {
    return this.current_gui.add_relationship(class_a_id, class_b_id, name, mult);
  };

  GUI.prototype.add_relationship_attr = function(class_id, attribute_id, name) {
    return this.current_gui.add_relationship_attr(class_id, attribute_id, name);
  };

  GUI.prototype.add_relationship_isa = function(class_id, isa_id, name) {
    return this.current_gui.add_relationship_isa(class_id, isa_id, name);
  };

  GUI.prototype.add_relationship_isa_inverse = function(class_id, isa_id, name) {
    return this.current_gui.add_relationship_isa_inverse(class_id, isa_id, name);
  };

  GUI.prototype.add_subsumption = function(class_parent_id, class_child_id, disjoint, covering) {
    return this.current_gui.add_subsumption(class_parent_id, class_child_id, disjoint, covering);
  };

  GUI.prototype.edit_class_name = function(class_id, name) {
    return this.current_gui.edit_class_name(class_id, name);
  };

  GUI.prototype.delete_class = function(class_id) {
    return this.current_gui.delete_class(class_id);
  };

  GUI.prototype.set_isa_state = function(class_id, disjoint, covering) {
    return this.current_gui.set_isa_state(class_id, disjoint, covering);
  };

  GUI.prototype.set_options_classid = function(model_id) {
    return this.current_gui.set_options_classid(model_id);
  };

  GUI.prototype.set_association_state = function(class_id, mult) {
    return this.current_gui.set_association_state(class_id, mult);
  };

  GUI.prototype.hide_options = function() {
    return this.current_gui.hide_options();
  };

  GUI.prototype.hide_toolbar = function() {
    return this.current_gui.hide_toolbar();
  };

  GUI.prototype.hide_umldiagram_page = function() {
    return this.current_gui.hide_umldiagram_page();
  };

  GUI.prototype.show_umldiagram_page = function() {
    return this.current_gui.show_umldiagram_page();
  };

  GUI.prototype.hide_eerdiagram_page = function() {
    return this.current_gui.eerdiagram_page();
  };

  GUI.prototype.show_eerdiagram_page = function() {
    return this.current_gui.eerdiagram_page();
  };

  GUI.prototype.set_editclass_classid = function(model_id) {
    return this.current_gui.set_editclass_classid(model_id);
  };

  GUI.prototype.set_selection_state = function() {
    return this.current_gui.set_selection_state();
  };

  GUI.prototype.show_export_json = function() {
    return this.current_gui.show_export_json();
  };

  GUI.prototype.refresh_export_json = function() {
    return this.current_gui.refresh_export_json();
  };

  GUI.prototype.on_cell_clicked = function(cellview, event, x, y) {
    return this.current_gui.on_cell_clicked(cellview, event, x, y);
  };

  GUI.prototype.import_json = function(json_obj) {
    return this.current_gui.import_json(json_obj);
  };

  GUI.prototype.import_jsonstr = function(data) {
    return this.current_gui.import_jsonstr(data);
  };

  GUI.prototype.show_import_json = function() {
    return this.current_gui.show_import_json();
  };

  GUI.prototype.reset_all = function() {
    return this.current_gui.reset_all();
  };

  return GUI;

})();

exports = exports != null ? exports : this;

if (exports.gui === void 0) {
  exports.gui = {};
}

exports.gui.gui_instance = null;

exports.gui.set_current_instance = function(gui_instance) {
  return exports.gui.gui_instance = gui_instance;
};

exports.gui.switch_to_erd = function() {
  gui_instance.aux_gui = gui_instance.current_gui;
  gui_instance.current_gui = gui_instance.prev_gui;
  return gui_instance.prev_gui = gui_instance.aux_gui;
};

exports.gui.GUI = GUI;
