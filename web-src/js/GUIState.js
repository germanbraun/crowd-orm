// Generated by CoffeeScript 1.4.0
var AssociationState, IsAState, SelectionState, State, exports,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

State = (function() {

  function State() {
    this.selectionstate_inst = new SelectionState();
    this.associationstate_inst = new AssociationState();
    this.isastate_inst = new IsAState();
  }

  State.prototype.on_cell_clicked = function(cellView, event, x, y, gui_instance) {};

  State.prototype.selection_state = function() {
    return this.selectionstate_inst;
  };

  State.prototype.association_state = function() {
    return this.associationstate_inst;
  };

  State.prototype.isa_state = function() {
    return this.isastate_inst;
  };

  return State;

})();

SelectionState = (function(_super) {

  __extends(SelectionState, _super);

  function SelectionState() {}

  SelectionState.prototype.on_cell_clicked = function(cellView, event, x, y, gui_instance) {
    if (cellView.highlighted === void 0 || cellView.highlighted === false) {
      cellView.highlight();
      cellView.highlighted = true;
      return gui_instance.set_options_classid(cellView.model.id);
    } else {
      cellView.unhighlight();
      cellView.highlighted = false;
      return gui_instance.hide_options();
    }
  };

  return SelectionState;

})(State);

AssociationState = (function(_super) {

  __extends(AssociationState, _super);

  function AssociationState() {
    this.cell_starter = null;
    this.mult = null;
    this.with_class = false;
    this.name = null;
    this.roles = null;
  }

  AssociationState.prototype.reset = function() {
    this.cell_starter = null;
    this.with_class = false;
    return this.name = null;
  };

  AssociationState.prototype.set_cellStarter = function(cell_starter) {
    this.cell_starter = cell_starter;
  };

  AssociationState.prototype.set_mult = function(mult) {
    this.mult = mult;
  };

  AssociationState.prototype.set_roles = function(roles) {
    this.roles = roles;
  };

  AssociationState.prototype.set_cardinality = function(mult) {
    this.mult = mult;
  };

  AssociationState.prototype.set_name = function(name) {
    this.name = name;
  };

  AssociationState.prototype.set_with_class = function(with_class) {
    if (this.name != null) {
      return this.with_class = with_class;
    } else {
      return this.with_class = false;
    }
  };

  AssociationState.prototype.enable_with_class = function(name) {
    this.name = name;
    return this.with_class = true;
  };

  AssociationState.prototype.on_cell_clicked = function(cell_view, event, x, y, gui_instance) {
    if (this.with_class) {
      gui_instance.add_association_class(this.cell_starter, cell_view.model.id, this.name, this.mult, this.roles);
    } else {
      gui_instance.add_relationship(this.cell_starter, cell_view.model.id, this.name, this.mult, this.roles);
    }
    return this.reset();
  };

  return AssociationState;

})(State);

IsAState = (function(_super) {

  __extends(IsAState, _super);

  function IsAState() {
    this.reset();
  }

  IsAState.prototype.reset = function() {
    this.disjoint = false;
    this.covering = false;
    return this.cell_starter = null;
  };

  IsAState.prototype.set_cellStarter = function(cell_starter) {
    this.cell_starter = cell_starter;
  };

  IsAState.prototype.set_constraint = function(disjoint, covering) {
    this.disjoint = disjoint;
    this.covering = covering;
  };

  IsAState.prototype.set_disjoint = function(disjoint) {
    this.disjoint = disjoint;
  };

  IsAState.prototype.set_covering = function(covering) {
    this.covering = covering;
  };

  IsAState.prototype.on_cell_clicked = function(cell_view, event, x, y, gui_instance) {
    gui_instance.add_subsumption(this.cell_starter, cell_view.model.id, this.disjoint, this.covering);
    return this.reset();
  };

  return IsAState;

})(State);

exports = exports != null ? exports : this;

if (exports.gui === void 0) {
  exports.gui = {};
}

exports.gui.state_inst = new State();

exports.gui.SelectionState = SelectionState;

exports.gui.AssociationState = AssociationState;

exports.gui.IsAState = IsAState;
