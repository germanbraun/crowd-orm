// Generated by CoffeeScript 1.12.5
var RelationOptionsView, exports;

RelationOptionsView = Backbone.View.extend({
  initialize: function() {
    this.render();
    return this.$el.hide();
  },
  render: function() {
    var template;
    template = _.template($("#template_relationoptions").html());
    return this.$el.html(template({
      classid: this.classid
    }));
  },
  events: {
    "click a#cardfrom_accept": "cardfrom",
    "click a#cardto_accept": "cardto",
    "click a#association_button": "new_relation",
    "click a#assoc_class_button": "new_assoc_class"
  },
  cardfrom: function(from) {
    var from_1, from_2, from_aux;
    from_1 = $('#cardfrom-1').val();
    console.log(from_1);
    from_aux = from_1.concat("..");
    from_2 = $('#cardfrom-2').val();
    console.log(from_2);
    this.from = from_aux.concat(from_2);
    return this.from_role = $('#role-from').val();
  },
  cardto: function(too) {
    var too_1, too_2, too_aux;
    too_1 = $('#cardto-1').val();
    console.log(too_1);
    too_aux = too_1.concat("..");
    too_2 = $('#cardto-2').val();
    console.log(too_2);
    this.too = too_aux.concat(too_2);
    return this.to_role = $('#role-to').val();
  },
  new_relation: function(from, too) {
    var mult, name, roles;
    mult = [];
    mult[0] = this.from;
    mult[1] = this.too;
    roles = [];
    roles[0] = this.from_role;
    roles[1] = this.to_role;
    name = $("#assoc_name").val();
    console.log("New association without class:");
    console.log(mult);
    return gui.gui_instance.set_association_state(this.classid, mult, roles, name, false);
  },
  new_assoc_class: function(from, too) {
    var mult, name, roles;
    mult = [];
    mult[0] = this.from;
    mult[1] = this.too;
    roles = [];
    roles[0] = this.from_role;
    roles[1] = this.to_role;
    name = $("#assoc_name").val();
    console.log("New association with class: " + name);
    console.log(mult);
    return gui.gui_instance.set_association_state(this.classid, mult, roles, name, true);
  },
  map_to_mult: function(str) {
    switch (str) {
      case "zeromany":
        return "0..*";
      case "onemany":
        return "1..*";
      case "zeroone":
        return "0..1";
      case "oneone":
        return "1..1";
    }
  },
  set_classid: function(classid) {
    var viewpos;
    this.classid = classid;
    viewpos = graph.getCell(this.classid).findView(paper).getBBox();
    this.$el.css({
      top: viewpos.y,
      left: viewpos.x + viewpos.width,
      position: 'absolute',
      'z-index': 1
    });
    return this.$el.show();
  },
  get_classid: function() {
    return this.classid;
  },
  hide: function() {
    return this.$el.hide();
  }
});

exports = exports != null ? exports : this;

exports.RelationOptionsView = RelationOptionsView;
