// Generated by CoffeeScript 1.10.0
(function() {
  var Diagram, exports, ref;

  exports = exports != null ? exports : this;

  exports.model = (ref = exports.model) != null ? ref : {};

  Diagram = (function() {
    function Diagram(graph) {
      this.graph = graph != null ? graph : null;
      this.factory = null;
    }

    Diagram.prototype.reset = function() {};

    Diagram.prototype.get_factory = function() {
      return this.factory;
    };

    Diagram.prototype.set_factory = function(factory) {
      this.factory = factory;
    };

    Diagram.prototype.update_view = function(class_id, paper) {};

    Diagram.prototype.find_class_by_name = function(name) {};

    Diagram.prototype.find_class_by_classid = function(classid) {};

    Diagram.prototype.find_attr_by_attrid = function(attrid) {};

    Diagram.prototype.get_graph = function() {
      return this.graph;
    };

    Diagram.prototype.set_graph = function(graph) {
      this.graph = graph;
    };

    Diagram.prototype.actualizar_graph = function() {};

    Diagram.prototype.to_json = function() {};

    Diagram.prototype.import_json = function(json) {};

    return Diagram;

  })();

  exports.model.Diagram = Diagram;

}).call(this);
// Generated by CoffeeScript 1.10.0
(function() {
  var Factory, erd, exports, orm, ref, uml;

  uml = joint.shapes.uml;

  erd = joint.shapes.erd;

  orm = joint.shapes.orm;

  exports = exports != null ? exports : this;

  exports.model = (ref = exports.model) != null ? ref : {};

  Factory = (function() {
    function Factory() {}

    Factory.prototype.create_class = function(name) {};

    Factory.prototype.create_association = function(class_a_id, class_b_id, name) {
      if (name == null) {
        name = null;
      }
    };

    return Factory;

  })();

  exports.model.Factory = Factory;

}).call(this);
// Generated by CoffeeScript 1.10.0
(function() {
  var UMLFactory, exports, ref, ref1, uml,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  uml = joint.shapes.uml;

  exports = exports != null ? exports : this;

  exports.model = (ref = exports.model) != null ? ref : {};

  exports.model.uml = (ref1 = exports.model.uml) != null ? ref1 : {};

  UMLFactory = (function(superClass) {
    extend(UMLFactory, superClass);

    function UMLFactory() {}

    UMLFactory.prototype.create_class = function(class_name, attribs, methods, css_class) {
      var newclass, params;
      if (css_class == null) {
        css_class = null;
      }
      console.log(attribs);
      console.log(methods);
      params = {
        position: {
          x: 20,
          y: 20
        },
        size: {
          width: 175,
          height: 100
        },
        name: class_name,
        attributes: attribs,
        methods: methods,
        attrs: {
          '.uml-class-name-rect': {
            fill: '#ff8450',
            stroke: '#fff'
          },
          '.uml-class-name-text': {
            fill: '#000000'
          }
        }
      };
      if (css_class != null) {
        params.attrs = css_class;
      }
      newclass = new uml.Class(params);
      return newclass;
    };

    UMLFactory.prototype.create_association = function(class_a_id, class_b_id, name, css_links, mult, roles) {
      var labels, link, str_labels;
      if (name == null) {
        name = null;
      }
      if (css_links == null) {
        css_links = null;
      }
      if (mult == null) {
        mult = null;
      }
      if (roles == null) {
        roles = null;
      }
      link = new joint.dia.Link({
        source: {
          id: class_a_id
        },
        target: {
          id: class_b_id
        },
        attrs: css_links
      });
      str_labels = [null, null, null];
      if (roles !== null) {
        if (roles[0] !== null) {
          str_labels[0] = roles[0];
        }
        if (roles[1] !== null) {
          str_labels[2] = roles[1];
        }
      }
      if (mult !== null) {
        if (mult[0] !== null) {
          if (str_labels[0] !== null) {
            str_labels[0] += "\n" + mult[0];
          } else {
            str_labels[0] = mult[0];
          }
        }
        if (mult[1] !== null) {
          if (str_labels[2] !== null) {
            str_labels[2] += "\n" + mult[1];
          } else {
            str_labels[2] = mult[1];
          }
        }
      }
      str_labels[1] = name;
      labels = [];
      if (str_labels[1] !== null) {
        labels[1] = {
          position: 0.5,
          attrs: {
            text: {
              text: str_labels[1],
              fill: '#0000ff'
            },
            rect: {
              fill: '#ffffff'
            }
          }
        };
      }
      if (str_labels[0] !== null) {
        labels[0] = {
          position: 0.1,
          attrs: {
            text: {
              text: str_labels[0],
              fill: '#0000ff'
            },
            rect: {
              fill: '#ffffff'
            }
          }
        };
      }
      if (str_labels[2] !== null) {
        labels[2] = {
          position: 0.9,
          attrs: {
            text: {
              text: str_labels[2],
              fill: '#0000ff'
            },
            rect: {
              fill: '#ffffff'
            }
          }
        };
      }
      link.set({
        labels: labels
      });
      return link;
    };

    UMLFactory.prototype.create_generalization = function(class_a_id, class_b_id, css_links, disjoint, covering) {
      var labels, legend, link;
      if (css_links == null) {
        css_links = null;
      }
      if (disjoint == null) {
        disjoint = false;
      }
      if (covering == null) {
        covering = false;
      }
      labels = [];
      link = new joint.shapes.uml.Generalization({
        source: {
          id: class_b_id
        },
        target: {
          id: class_a_id
        },
        attrs: css_links
      });
      if (disjoint || covering) {
        legend = "{";
        if (disjoint) {
          legend = legend + "disjoint";
        }
        if (covering) {
          if (legend !== "") {
            legend = legend + ",";
          }
          legend = legend + "covering";
        }
        legend = legend + "}";
      }
      labels = labels.concat([
        {
          position: 0.8,
          attrs: {
            text: {
              text: legend,
              fill: '#0000ff'
            },
            rect: {
              fill: '#ffffff'
            }
          }
        }
      ]);
      link.set({
        labels: labels
      });
      return link;
    };

    UMLFactory.prototype.create_association_class = function(class_name, css_class) {
      if (css_class == null) {
        css_class = null;
      }
      return this.create_class(class_name, css_class);
    };

    return UMLFactory;

  })(model.Factory);

  exports.model.uml.UMLFactory = UMLFactory;

}).call(this);
// Generated by CoffeeScript 1.10.0
(function() {
  var UMLDiagram, exports, ref, ref1,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  exports = exports != null ? exports : this;

  exports.model = (ref = exports.model) != null ? ref : {};

  exports.model.uml = (ref1 = exports.model.uml) != null ? ref1 : {};

  UMLDiagram = (function(superClass) {
    extend(UMLDiagram, superClass);

    function UMLDiagram(graph) {
      this.graph = graph != null ? graph : null;
      this._add_events = bind(this._add_events, this);
      this.clases = [];
      this.links = [];
      this.cells_nuevas = [];
      this.cells_deleted = [];
      this.factory = new model.uml.UMLFactory();
      if (this.graph != null) {
        this._add_events();
      }
    }

    UMLDiagram.prototype.get_factory = function() {
      return this.factory;
    };

    UMLDiagram.prototype.set_factory = function(factory) {
      this.factory = factory;
    };

    UMLDiagram.prototype.get_graph = function() {
      return this.graph;
    };

    UMLDiagram.prototype.set_graph = function(graph) {
      this.graph = graph;
      return this._add_events();
    };

    UMLDiagram.prototype._add_events = function() {
      return this.graph.on('remove', (function(_this) {
        return function(event) {
          var link;
          if (event.attributes.type === 'link') {
            return link = _this.delete_link_by_id(event.id);
          }
        };
      })(this));
    };

    UMLDiagram.prototype.get_clases = function() {
      return this.clases;
    };

    UMLDiagram.prototype.get_links = function() {
      return this.links;
    };

    UMLDiagram.prototype.get_clase = function(nombre) {};

    UMLDiagram.prototype.find_class_by_name = function(name) {
      return this.clases.find(function(elt, index, arr) {
        return elt.get_name() === name;
      });
    };

    UMLDiagram.prototype.find_class_by_classid = function(classid) {
      return this.clases.find(function(elt, index, arr) {
        return elt.has_classid(classid);
      });
    };

    UMLDiagram.prototype.find_link_by_id = function(linkid) {
      return this.links.find(function(elt, index, arr) {
        return elt.has_classid(linkid);
      });
    };

    UMLDiagram.prototype.find_IsA_with_parent = function(parentclass) {
      return this.links.find(function(elt, index, arr) {
        return elt.has_parent(parentclass);
      });
    };

    UMLDiagram.prototype.find_links_by_name = function(name) {
      return this.links.filter(function(elt) {
        return elt.name === name;
      });
    };

    UMLDiagram.prototype.add_generalization = function(class_parent, class_childs, disjoint, covering, name) {
      var class_child_obj, class_parent_obj;
      if (disjoint == null) {
        disjoint = false;
      }
      if (covering == null) {
        covering = false;
      }
      if (name == null) {
        name = null;
      }
      class_parent_obj = null;
      class_child_obj = null;
      if (typeof class_parent === "string") {
        class_parent_obj = this.find_class_by_classid(class_parent);
      } else if (typeof class_parent === "object") {
        class_parent_obj = class_parent;
      }
      if (class_childs instanceof Array) {
        class_childs.forEach(function(child) {
          return this.add_generalization(class_parent, child, disjoint, covering, name);
        }, this);
      } else if (typeof class_childs === "string") {
        class_child_obj = this.find_class_by_classid(class_childs);
      } else if (typeof class_childs === "object") {
        class_child_obj = class_childs;
      }
      if ((class_child_obj != null) && (class_parent_obj != null)) {
        return this.add_generalization_objs(class_parent_obj, class_child_obj, disjoint, covering, name);
      }
    };

    UMLDiagram.prototype.add_generalization_objs = function(class_parent, class_child, disjoint, covering, name) {
      var gen;
      if (disjoint == null) {
        disjoint = false;
      }
      if (covering == null) {
        covering = false;
      }
      if (name == null) {
        name = null;
      }
      gen = this.find_IsA_with_parent(class_parent);
      if ((gen === void 0) || (gen === null)) {
        gen = new model.uml.Generalization(class_parent, [class_child], name);
        gen.set_disjoint(disjoint);
        gen.set_covering(covering);
        return this.agregar_link(gen);
      } else {
        gen.add_child(class_child);
        gen.create_joint(this.factory, csstheme);
        this.cells_nuevas.push(gen.get_joint_for_child(class_child));
        return this.actualizar_graph();
      }
    };

    UMLDiagram.prototype.add_association = function(class_a_id, class_b_id, name, mult, roles) {
      var class_a, class_b, newassoc;
      if (name == null) {
        name = null;
      }
      if (mult == null) {
        mult = null;
      }
      if (roles == null) {
        roles = null;
      }
      class_a = this.find_class_by_classid(class_a_id);
      class_b = this.find_class_by_classid(class_b_id);
      newassoc = new model.uml.Link([class_a, class_b], name);
      if (mult !== null) {
        newassoc.set_mult(mult);
      }
      if (roles !== null) {
        newassoc.set_roles(roles);
      }
      return this.agregar_link(newassoc);
    };

    UMLDiagram.prototype.add_association_class = function(class_a_id, class_b_id, name, mult, roles) {
      var class_a, class_b, newassoc;
      if (mult == null) {
        mult = null;
      }
      if (roles == null) {
        roles = null;
      }
      class_a = this.find_class_by_classid(class_a_id);
      class_b = this.find_class_by_classid(class_b_id);
      newassoc = new model.uml.LinkWithClass([class_a, class_b], name);
      if (mult !== null) {
        newassoc.set_mult(mult);
      }
      if (roles !== null) {
        newassoc.set_roles(roles);
      }
      this.agregar_link(newassoc);
      return newassoc.update_position();
    };

    UMLDiagram.prototype.add_class = function(hash_data) {
      var joints, newclass;
      if (hash_data.attrs == null) {
        hash_data.attrs = [];
      }
      if (hash_data.methods == null) {
        hash_data.methods = [];
      }
      if (hash_data.position == null) {
        hash_data.position = {
          x: 20,
          y: 20
        };
      }
      newclass = new model.uml.Class(hash_data.name, hash_data.attrs, hash_data.methods);
      joints = newclass.get_joint();
      if ((joints != null) && (joints.length[0] != null)) {
        joints[0].position(hash_data.position.x, hash_data.position.y);
      }
      this.agregar_clase(newclass);
      return newclass;
    };

    UMLDiagram.prototype.agregar_clase = function(clase) {
      this.clases.push(clase);
      this.cells_nuevas.push(clase.get_joint(this.factory, csstheme));
      return this.actualizar_graph();
    };

    UMLDiagram.prototype.delete_class = function(c) {
      this.clases = this.clases.filter(function(elt, index, arr) {
        return elt !== c;
      });
      this.remove_associated_links(c);
      this.cells_deleted = this.cells_deleted.concat(c.get_joint());
      return this.actualizar_graph();
    };

    UMLDiagram.prototype.find_associated_links = function(c) {
      return this.links.filter(function(link, indx, arr) {
        return link.is_associated(c);
      }, this);
    };

    UMLDiagram.prototype.remove_associated_links = function(c) {
      var lst;
      lst = this.find_associated_links(c);
      return lst.forEach(function(link, indx, arr) {
        return this.delete_link(link);
      }, this);
    };

    UMLDiagram.prototype.rename_class = function(classid, name) {
      var c;
      c = this.find_class_by_classid(classid);
      if (c !== null) {
        return c.set_name(name);
      }
    };

    UMLDiagram.prototype.delete_link_by_id = function(linkid) {
      var link;
      link = this.find_link_by_id(linkid);
      if (link != null) {
        return this.delete_link(link);
      }
    };

    UMLDiagram.prototype.delete_link = function(link) {
      this.links = this.links.filter(function(elt, index, arr) {
        return elt !== link;
      });
      this.cells_deleted = this.cells_deleted.concat(link.get_joint());
      return this.actualizar_graph();
    };

    UMLDiagram.prototype.update_view = function(class_id, paper) {
      var class_obj;
      class_obj = this.find_class_by_classid(class_id);
      if (class_obj !== null) {
        return class_obj.update_view(paper);
      }
    };

    UMLDiagram.prototype.delete_class_by_name = function(name) {
      var c;
      c = this.find_class_by_name(name);
      if (c !== void 0) {
        return this.delete_class(c);
      }
    };

    UMLDiagram.prototype.delete_class_by_classid = function(classid) {
      var c;
      c = this.find_class_by_classid(classid);
      if (c !== void 0) {
        return this.delete_class(c);
      }
    };

    UMLDiagram.prototype.reset = function() {
      this.clases.forEach(function(c, i, arr) {
        return this.delete_class(c);
      }, this);
      return this.actualizar_graph();
    };

    UMLDiagram.prototype.agregar_link = function(link) {
      this.links.push(link);
      this.cells_nuevas.push(link.get_joint(this.factory, csstheme));
      return this.actualizar_graph();
    };

    UMLDiagram.prototype.set_satisfiable = function(classes_list) {
      return classes_list.forEach(function(class_name, i, arr) {
        return this.set_class_satisfiable(class_name);
      }, this);
    };

    UMLDiagram.prototype.set_class_satisfiable = function(class_name) {
      var c;
      c = this.find_class_by_name(class_name);
      if (c != null) {
        return c.set_unsatisfiable(false, csstheme);
      }
    };

    UMLDiagram.prototype.set_unsatisfiable = function(classes_list) {
      return classes_list.forEach(function(class_name, i, arr) {
        return this.set_class_unsatisfiable(class_name);
      }, this);
    };

    UMLDiagram.prototype.set_class_unsatisfiable = function(class_name) {
      var c;
      c = this.find_class_by_name(class_name);
      if (c != null) {
        return c.set_unsatisfiable(true, csstheme);
      }
    };

    UMLDiagram.prototype.to_json = function() {
      var classes_json, links_json;
      classes_json = $.map(this.clases, function(myclass) {
        return myclass.to_json();
      });
      links_json = $.map(this.links, function(mylink) {
        return mylink.to_json();
      });
      return {
        classes: classes_json,
        links: links_json
      };
    };

    UMLDiagram.prototype.import_json = function(json) {
      var importer;
      importer = new model.uml.UMLImporter(this, json);
      return importer.do_import();
    };

    UMLDiagram.prototype.actualizar_graph = function() {
      if (this.graph !== null) {
        this.graph.addCell(this.cells_nuevas);
        this.cells_deleted.forEach(function(elt, index, arr) {
          return elt.remove();
        });
      }
      this.cells_deleted = [];
      return this.cells_nuevas = [];
    };

    UMLDiagram.prototype.same_elts = function(diag) {
      var all_same;
      if (this.clases.length !== diag.clases.length) {
        return false;
      }
      if (this.links.length !== diag.links.length) {
        return false;
      }
      all_same = true;
      this.clases.forEach(function(c) {
        var c2;
        c2 = diag.find_class_by_name(c.name);
        if (c2 != null) {
          return all_same = all_same && c2.same_elts(c);
        } else {
          return all_same = false;
        }
      });
      if (!all_same) {
        return false;
      }
      this.links.forEach(function(l) {
        var l2, one_same;
        l2 = diag.find_links_by_name(l.name);
        one_same = false;
        l2.forEach(function(l2b) {
          return one_same = one_same || l.same_elts(l2b);
        });
        return all_same = all_same && one_same;
      });
      return all_same;
    };

    return UMLDiagram;

  })(model.Diagram);

  exports.model.uml.UMLDiagram = UMLDiagram;

}).call(this);
// Generated by CoffeeScript 1.10.0
(function() {
  var UMLImporter, exports, ref, ref1;

  exports = exports != null ? exports : this;

  exports.model = (ref = exports.model) != null ? ref : {};

  exports.model.uml = (ref1 = exports.model.uml) != null ? ref1 : {};

  UMLImporter = (function() {
    function UMLImporter(diagram, json) {
      this.diagram = diagram;
      if (typeof json === "string") {
        this._json = JSON.parse(json);
      } else {
        this._json = json;
      }
      this._normalize();
    }

    UMLImporter.prototype.do_import = function() {
      this.import_classes();
      return this.import_links();
    };

    UMLImporter.prototype._normalize = function() {
      return this._json.classes.forEach(function(elt, index, arr) {
        var array, attr;
        array = [];
        if (elt.attrs != null) {
          attr = elt.attrs;
          attr.forEach(function(cv, index, attr) {
            var att;
            att = attr[index].name + ":" + attr[index].datatype;
            array.push(att);
            return array;
          });
        }
        return elt.attrs = array;
      });
    };

    UMLImporter.prototype.import_classes = function() {
      return this._json.classes.forEach(function(elt, index, arr) {
        console.log("class " + elt.name);
        return this.diagram.add_class(elt);
      }, this);
    };

    UMLImporter.prototype.import_links = function() {
      return this._json.links.forEach(function(elt, index, arr) {
        var class_a, class_b, class_parent, classes_children, covering, disjoint;
        if (elt.type === "association") {
          console.log("association " + elt.classes[0] + " - " + elt.classes[1]);
          class_a = this.diagram.find_class_by_name(elt.classes[0]);
          class_b = this.diagram.find_class_by_name(elt.classes[1]);
          if (elt.associated_class != null) {
            this.diagram.add_association_class(class_a.get_classid(), class_b.get_classid(), elt.name, elt.multiplicity, elt.roles);
          } else {
            this.diagram.add_association(class_a.get_classid(), class_b.get_classid(), elt.name, elt.multiplicity, elt.roles);
          }
        }
        if (elt.type === "generalization") {
          console.log("generalization " + elt.parent + " childs:");
          console.log(elt.classes);
          class_parent = this.diagram.find_class_by_name(elt.parent);
          classes_children = elt.classes.map(function(childname) {
            return this.diagram.find_class_by_name(childname);
          }, this);
          disjoint = elt.constraint.includes("disjoint");
          covering = elt.constraint.includes("covering");
          return this.diagram.add_generalization(class_parent, classes_children, disjoint, covering, elt.name);
        }
      }, this);
    };

    return UMLImporter;

  })();

  exports.model.uml.UMLImporter = UMLImporter;

}).call(this);
// Generated by CoffeeScript 1.10.0
(function() {
  var MyModel, exports, ref;

  exports = exports != null ? exports : this;

  exports.model = (ref = exports.model) != null ? ref : {};

  MyModel = (function() {
    function MyModel(name) {
      this.name = name;
      this.joint = null;
    }

    MyModel.prototype.get_joint = function(factory, csstheme) {
      if (factory == null) {
        factory = null;
      }
      if (csstheme == null) {
        csstheme = null;
      }
      if (factory !== null) {
        this.create_joint(factory, csstheme);
      }
      return this.joint;
    };

    MyModel.prototype.create_joint = function(factory, csstheme) {
      if (csstheme == null) {
        csstheme = null;
      }
      console.warn(this.toString() + " : Redefine create_joint() method on the subclass.");
      return null;
    };

    MyModel.prototype.update_view = function(paper) {
      if (this.joint !== null) {
        return this.joint.forEach(function(elt, index, arr) {
          var v;
          v = elt.findView(paper);
          return v.update();
        }, this);
      }
    };

    MyModel.prototype.has_classid = function(classid) {
      return this.get_classid() === classid;
    };

    MyModel.prototype.has_attrid = function(attrid) {
      return this.get_attributeid() === attrid;
    };

    MyModel.prototype.has_isaid = function(isaid) {
      return this.get_isaid() === isaid;
    };

    MyModel.prototype.has_relid = function(isaid) {
      return this.get_relid() === isaid;
    };

    MyModel.prototype.get_classid = function() {
      if (this.joint === null) {
        return false;
      } else {
        return this.joint[0].id;
      }
    };

    MyModel.prototype.get_attributeid = function() {
      if (this.joint === null) {
        return false;
      } else {
        return this.joint[0].id;
      }
    };

    MyModel.prototype.get_isaid = function() {
      if (this.joint === null) {
        return false;
      } else {
        return this.joint[0].id;
      }
    };

    MyModel.prototype.get_relid = function() {
      if (this.joint === null) {
        return false;
      } else {
        return this.joint[0].id;
      }
    };

    MyModel.prototype.to_json = function() {
      return {
        name: this.name
      };
    };

    MyModel.prototype.update_position = function() {};

    MyModel.prototype.same_elts = function(other) {
      return other.name === this.name;
    };

    return MyModel;

  })();

  exports.model.MyModel = MyModel;

}).call(this);
// Generated by CoffeeScript 1.10.0
(function() {
  var ServerConnection, exports;

  ServerConnection = (function() {
    function ServerConnection(error_callback) {
      this.error_callback = error_callback;
      this.urlprefix = "";
    }

    ServerConnection.prototype.set_urlprefix = function(str) {
      return this.urlprefix = str;
    };

    ServerConnection.prototype.request_satisfiable = function(json, callback_function) {
      var postdata, url;
      postdata = "json=" + json;
      url = this.urlprefix + "api/querying/satisfiable.php";
      console.log("Requesting at " + url);
      return $.ajax({
        type: "POST",
        url: url,
        data: postdata,
        success: callback_function,
        error: this.error_callback
      });
    };

    ServerConnection.prototype.request_translation = function(json, format, strategy, callback_function) {
      var url;
      url = this.urlprefix + "api/translate/" + strategy + ".php";
      console.log("Requesting at " + url);
      return $.ajax({
        type: "POST",
        url: url,
        data: {
          "format": format,
          "json": json
        },
        success: callback_function,
        error: this.error_callback
      });
    };

    ServerConnection.prototype.request_metamodel_translation = function(json, callback_function) {
      var url;
      url = this.urlprefix + "api/translate/metamodel.php";
      console.log("Requesting at " + url);
      return $.ajax({
        type: "POST",
        url: url,
        data: {
          "json": json
        },
        success: callback_function,
        error: this.error_callback
      });
    };

    ServerConnection.prototype.request_meta2erd_translation = function(json, callback_function) {
      var url;
      url = this.urlprefix + "api/translate/metamodeltoerd.php";
      console.log("Requesting at " + url);
      return $.ajax({
        type: "POST",
        url: url,
        data: {
          "json": json
        },
        success: callback_function,
        error: this.error_callback
      });
    };

    ServerConnection.prototype.request_meta2orm_translation = function(json, callback_function) {
      var url;
      url = this.urlprefix + "api/translate/metamodeltoorm.php";
      console.log("Requesting at " + url);
      return $.ajax({
        type: "POST",
        url: url,
        data: {
          "json": json
        },
        success: callback_function,
        error: this.error_callback
      });
    };

    return ServerConnection;

  })();

  exports = exports != null ? exports : this;

  exports.ServerConnection = ServerConnection;

}).call(this);
// Generated by CoffeeScript 1.10.0
(function() {
  var Class, exports, ref, ref1,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  exports = exports != null ? exports : this;

  exports.model = (ref = exports.model) != null ? ref : {};

  exports.model.uml = (ref1 = exports.model.uml) != null ? ref1 : {};

  Class = (function(superClass) {
    extend(Class, superClass);

    function Class(name, attrs, methods) {
      this.attrs = attrs != null ? attrs : [];
      this.methods = methods != null ? methods : [];
      Class.__super__.constructor.call(this, name);
      this.joint = null;
      this.unsatisfiable = false;
      this.on_change_objs = [];
    }

    Class.prototype.get_name = function() {
      return this.name;
    };

    Class.prototype.set_name = function(name1) {
      this.name = name1;
      if (this.joint !== null) {
        return this.joint[0].set("name", this.name);
      }
    };

    Class.prototype.get_attrs = function() {
      return this.attrs;
    };

    Class.prototype.get_methods = function() {
      return this.methods;
    };

    Class.prototype.set_unsatisfiable = function(bool, csstheme) {
      if (csstheme == null) {
        csstheme = null;
      }
      this.unsatisfiable = bool;
      if (csstheme != null) {
        return this.set_theme(csstheme);
      }
    };

    Class.prototype.set_theme = function(csstheme) {
      if ((this.joint != null) && (this.joint.length > 0)) {
        if (this.unsatisfiable) {
          return this.joint[0].set('attrs', csstheme.css_class_unsatisfiable);
        } else {
          return this.joint[0].set('attrs', csstheme.css_class);
        }
      }
    };

    Class.prototype.create_joint = function(factory, csstheme) {
      var cssclass;
      if (csstheme == null) {
        csstheme = null;
      }
      if (this.joint == null) {
        this.joint = [];
        if (csstheme != null) {
          if (this.unsatisfiable) {
            return cssclass = csstheme.css_class_unsatisfiable;
          } else {
            cssclass = csstheme.css_class;
            return this.joint.push(factory.create_class(this.name, this.attrs, this.methods, cssclass));
          }
        } else {
          return this.joint.push(factory.create_class(this.name, this.attrs, this.methods));
        }
      }
    };

    Class.prototype.to_json = function() {
      var array, json;
      json = Class.__super__.to_json.call(this);
      array = [];
      if (this.attrs != null) {
        this.attrs.forEach(function(cv, index, attrs) {
          var datatype_attr, dots, name_attr;
          this.attrs = attrs;
          dots = this.attrs[index].split(":");
          name_attr = dots[0].trim();
          datatype_attr = dots[1].trim();
          array.push({
            name: name_attr,
            datatype: datatype_attr
          });
          return array;
        });
      }
      json.attrs = array;
      json.methods = this.methods;
      if (this.joint != null) {
        json.position = this.joint[0].position();
      }
      return json;
    };

    Class.prototype.attach_my_event_handlers = function() {
      if (this.joint != null) {
        if (this.joint[0].mymodel_class == null) {
          this.joint[0].mymodel_class = this;
          return this.joint[0].on('change:position', function() {
            return this.mymodel_class.notify_change_position(this);
          });
        }
      }
    };

    Class.prototype.attach_on_change_position = function(object) {
      this.attach_my_event_handlers();
      return this.on_change_objs.push(object);
    };

    Class.prototype.notify_change_position = function(model) {
      return this.on_change_objs.forEach(function(obj, indx, arr) {
        return obj.update_position();
      });
    };

    Class.prototype.same_elts = function(other) {
      var all_same;
      all_same = Class.__super__.same_elts.call(this, other) && this.unsatisfiable === other.unsatisfiable;
      if (this.attrs.length !== other.attrs.length) {
        return false;
      }
      this.attrs.forEach(function(s) {
        return all_same = all_same && other.attrs.includes(s);
      });
      if (this.methods.length !== other.methods.length) {
        return false;
      }
      this.methods.forEach(function(s) {
        return all_same = all_same && other.methods.includes(s);
      });
      return all_same;
    };

    return Class;

  })(model.MyModel);

  exports.model.uml.Class = Class;

}).call(this);
// Generated by CoffeeScript 1.10.0
(function() {
  var Link, exports, ref, ref1,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  exports = exports != null ? exports : this;

  exports.model = (ref = exports.model) != null ? ref : {};

  exports.model.uml = (ref1 = exports.model.uml) != null ? ref1 : {};

  Link = (function(superClass) {
    extend(Link, superClass);

    function Link(classes, name) {
      this.classes = classes;
      if (name == null) {
        name = null;
      }
      if (name != null) {
        Link.__super__.constructor.call(this, name);
      } else {
        Link.__super__.constructor.call(this, Link.get_new_name());
      }
      this.mult = [null, null];
      this.roles = [null, null];
    }

    Link.prototype.set_mult = function(mult1) {
      var i, j, len, m, ref2, results;
      this.mult = mult1;
      ref2 = this.mult;
      results = [];
      for (i = j = 0, len = ref2.length; j < len; i = ++j) {
        m = ref2[i];
        results.push(this.change_to_null(m, i));
      }
      return results;
    };

    Link.prototype.set_roles = function(roles) {
      this.roles = roles;
    };

    Link.prototype.change_to_null = function(mult, index) {
      if ((mult === "0..*") || (mult === "0..n")) {
        return this.mult[index] = null;
      }
    };

    Link.prototype.set_from = function(class_from) {
      return this.classes[0] = class_from;
    };

    Link.prototype.get_from = function() {
      return this.classes[0];
    };

    Link.prototype.set_to = function(class_to) {
      return this.classes[1] = class_to;
    };

    Link.prototype.get_to = function() {
      return this.classes[1];
    };

    Link.prototype.get_classes = function() {
      return this.classes;
    };

    Link.prototype.is_two_linked = function() {
      return this.classes.length === 2;
    };

    Link.prototype.has_parent = function(parentclass) {
      return false;
    };

    Link.prototype.is_associated = function(c) {
      return this.has_parent(c) || this.classes.includes(c);
    };

    Link.prototype.to_json = function() {
      var json;
      json = Link.__super__.to_json.call(this);
      json.classes = $.map(this.classes, function(myclass) {
        return myclass.get_name();
      });
      json.multiplicity = this.mult;
      json.roles = this.roles;
      json.type = "association";
      return json;
    };

    Link.prototype.create_joint = function(factory, csstheme) {
      if (csstheme == null) {
        csstheme = null;
      }
      if (this.joint === null) {
        this.joint = [];
        if (csstheme !== null) {
          return this.joint.push(factory.create_association(this.classes[0].get_classid(), this.classes[1].get_classid(), this.name, csstheme.css_links, this.mult, this.roles));
        } else {
          return this.joint.push(factory.create_association(this.classes[0].get_classid(), this.classes[1].get_classid(), this.name, null, this.mult, this.roles));
        }
      }
    };

    Link.prototype.same_elts = function(other) {
      var all_same, fn, index, j, k, l, len, len1, n, ref2, ref3, ref4, v;
      if (!Link.__super__.same_elts.call(this, other)) {
        return false;
      }
      if (this.classes.length !== other.classes.length) {
        return false;
      }
      all_same = true;
      fn = (function(_this) {
        return function(index) {
          return all_same = all_same && _this.classes[index].same_elts(other.classes[index]);
        };
      })(this);
      for (index = j = 0, ref2 = this.classes.length; 0 <= ref2 ? j < ref2 : j > ref2; index = 0 <= ref2 ? ++j : --j) {
        fn(index);
      }
      ref3 = this.mult;
      for (k = l = 0, len = ref3.length; l < len; k = ++l) {
        v = ref3[k];
        all_same = all_same && v === other.mult[k];
      }
      ref4 = this.roles;
      for (k = n = 0, len1 = ref4.length; n < len1; k = ++n) {
        v = ref4[k];
        all_same = all_same && v === other.roles[k];
      }
      return all_same;
    };

    return Link;

  })(model.MyModel);

  Link.get_new_name = function() {
    if (Link.name_number === void 0) {
      Link.name_number = 0;
    }
    Link.name_number = Link.name_number + 1;
    return "r" + Link.name_number;
  };

  exports.model.uml.Link = Link;

}).call(this);
// Generated by CoffeeScript 1.10.0
(function() {
  var Generalization, exports, ref, ref1,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  exports = exports != null ? exports : this;

  exports.model = (ref = exports.model) != null ? ref : {};

  exports.model.uml = (ref1 = exports.model.uml) != null ? ref1 : {};

  Generalization = (function(superClass) {
    extend(Generalization, superClass);

    function Generalization(parent_class, classes, name) {
      this.parent_class = parent_class;
      this.classes = classes;
      if (name == null) {
        name = null;
      }
      Generalization.__super__.constructor.call(this, this.classes, name);
      this.disjoint = false;
      this.covering = false;
    }

    Generalization.prototype.get_joint = function(factory, csstheme) {
      if (factory == null) {
        factory = null;
      }
      if (csstheme == null) {
        csstheme = null;
      }
      Generalization.__super__.get_joint.call(this, factory, csstheme);
      if (this.joint.length < this.classes.length) {
        if (factory !== null) {
          this.create_joint(factory, csstheme);
        }
      }
      return this.joint;
    };

    Generalization.prototype.create_joint = function(factory, csstheme) {
      if (csstheme == null) {
        csstheme = null;
      }
      if (csstheme === null) {
        csstheme = {
          css_links: null
        };
      }
      if ((this.joint === null) || (this.joint.length < this.classes.length)) {
        this.joint = [];
        return this.classes.forEach(function(elt, index, arr) {
          var covering, disjoint;
          if (!this.has_joint_instance(elt)) {
            if (index === 0) {
              disjoint = this.disjoint;
              covering = this.covering;
            } else {
              disjoint = covering = false;
            }
            return this.joint.push(factory.create_generalization(this.parent_class.get_classid(), elt.get_classid(), csstheme.css_links, disjoint, covering));
          }
        }, this);
      }
    };

    Generalization.prototype.has_joint_instance = function(elt) {
      var classid, founded;
      classid = elt.get_classid();
      founded = this.joint.find(function(elt, index, arr) {
        return elt.get('source').id === classid;
      });
      return founded != null;
    };

    Generalization.prototype.get_joint_for_child = function(classchild) {
      var classid, founded;
      classid = classchild.get_classid();
      founded = this.joint.find(function(elt, index, arr) {
        return elt.get('source').id === classid;
      });
      return founded;
    };

    Generalization.prototype.has_parent = function(parentclass) {
      return this.parent_class === parentclass;
    };

    Generalization.prototype.add_child = function(childclass) {
      return this.classes.push(childclass);
    };

    Generalization.prototype.set_disjoint = function(disjoint1) {
      this.disjoint = disjoint1;
    };

    Generalization.prototype.set_covering = function(covering1) {
      this.covering = covering1;
    };

    Generalization.prototype.get_disjoint = function() {
      return this.disjoint;
    };

    Generalization.prototype.get_covering = function() {
      return this.covering;
    };

    Generalization.prototype.to_json = function() {
      var constraint, json;
      json = Generalization.__super__.to_json.call(this);
      json.parent = this.parent_class.get_name();
      json.multiplicity = null;
      json.type = "generalization";
      constraint = [];
      if (this.disjoint) {
        constraint.push("disjoint");
      }
      if (this.covering) {
        constraint.push("covering");
      }
      json.constraint = constraint;
      return json;
    };

    return Generalization;

  })(model.uml.Link);

  exports.model.uml.Generalization = Generalization;

}).call(this);
// Generated by CoffeeScript 1.10.0
(function() {
  var LinkWithClass, exports, ref, ref1,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  exports = exports != null ? exports : this;

  exports.model = (ref = exports.model) != null ? ref : {};

  exports.model.uml = (ref1 = exports.model.uml) != null ? ref1 : {};

  LinkWithClass = (function(superClass) {
    extend(LinkWithClass, superClass);

    function LinkWithClass(classes, name) {
      this.classes = classes;
      LinkWithClass.__super__.constructor.call(this, this.classes, name);
      this.mult = [null, null];
      this.assoc_class = new model.uml.Class(name);
      this.j_assoc_link = null;
      this.j_assoc_class = null;
    }

    LinkWithClass.prototype.create_joint = function(factory, csstheme) {
      if (csstheme == null) {
        csstheme = null;
      }
      LinkWithClass.__super__.create_joint.call(this, factory, csstheme);
      this.j_assoc_class = this.assoc_class.get_joint(factory, csstheme)[0];
      this.j_assoc_link = factory.create_association_link(csstheme.css_assoc_links);
      this.joint.push(this.j_assoc_link);
      this.joint.push(this.j_assoc_class);
      this.classes[0].attach_on_change_position(this);
      return this.classes[1].attach_on_change_position(this);
    };

    LinkWithClass.prototype.update_position = function() {
      var middlex, middley, source_pos, source_size, target_pos, target_size;
      if ((this.j_assoc_link != null) && (this.j_assoc_class != null)) {
        this.j_assoc_link.set('source', {
          id: this.classes[0].get_joint()[0].id
        });
        this.j_assoc_link.set('target', {
          id: this.classes[1].get_joint()[0].id
        });
        target_pos = this.classes[1].get_joint()[0].position();
        source_pos = this.classes[0].get_joint()[0].position();
        target_size = this.classes[1].get_joint()[0].attributes.size;
        source_size = this.classes[0].get_joint()[0].attributes.size;
        middlex = Math.abs(target_pos.x + source_pos.x + target_size.width / 2 + source_size.width / 2) / 2;
        middley = Math.abs(target_pos.y + source_pos.y + target_size.height / 2 + source_size.height / 2) / 2;
        this.j_assoc_class.position(middlex, middley + 100);
        this.j_assoc_link.set('source', {
          x: middlex,
          y: middley
        });
        return this.j_assoc_link.set('target', {
          id: this.j_assoc_class.id
        });
      }
    };

    LinkWithClass.prototype.to_json = function() {
      var json;
      json = LinkWithClass.__super__.to_json.call(this);
      json.associated_class = this.assoc_class.to_json();
      return json;
    };

    return LinkWithClass;

  })(model.uml.Link);

  exports.model.uml.LinkWithClass = LinkWithClass;

}).call(this);
// Generated by CoffeeScript 1.10.0
(function() {
  var ERDFactory, erd, exports, ref, ref1,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  erd = joint.shapes.erd;

  exports = exports != null ? exports : this;

  exports.model = (ref = exports.model) != null ? ref : {};

  exports.model.eer = (ref1 = exports.model.eer) != null ? ref1 : {};

  ERDFactory = (function(superClass) {
    extend(ERDFactory, superClass);

    function ERDFactory() {}

    ERDFactory.prototype.create_class = function(class_name, css_class) {
      var newclass, params;
      if (css_class == null) {
        css_class = null;
      }
      params = {
        position: {
          x: 20,
          y: 20
        },
        attrs: {
          text: {
            fill: "#000000",
            text: class_name,
            'letter-spacing': 0
          },
          '.outer, .inner': {
            fill: '#31d0c6',
            stroke: 'none',
            filter: {
              name: 'dropShadow',
              args: {
                dx: 0.5,
                dy: 2,
                blur: 2,
                color: '#333333'
              }
            }
          }
        }
      };
      newclass = new erd.Entity(params);
      return newclass;
    };

    ERDFactory.prototype.create_attribute = function(attr_name, attr_type, css_class) {
      var newattribute;
      if (css_class == null) {
        css_class = null;
      }
      if (attr_type === 'key') {
        newattribute = new erd.Key({
          position: {
            x: 200,
            y: 10
          },
          attrs: {
            text: {
              fill: '#ffffff',
              text: attr_name
            }
          }
        });
      } else {
        newattribute = new erd.Normal({
          position: {
            x: 150,
            y: 150
          },
          attrs: {
            text: {
              fill: '#ffffff',
              text: attr_name,
              style: {
                'text-shadow': '1px 0 1px #333333'
              }
            }
          }
        });
      }
      return newattribute;
    };

    ERDFactory.prototype.create_link_attribute = function(class_name, attr_name) {
      var markup_style, myLink;
      markup_style = ['<path class="connection" stroke="black" d="M 0 0 0 0"/>', '<path class="connection-wrap" d="M 0 0 0 0"/>', '<g class="labels"/>', '<g class="marker-vertices"/>', '<g class="marker-arrowheads"/>'];
      myLink = new erd.Line({
        markup: markup_style.join(''),
        source: {
          id: attr_name
        },
        target: {
          id: class_name
        }
      });
      return myLink;
    };

    ERDFactory.prototype.create_link_relationship = function(class_name, rel_name, css_links, mult, roles) {
      var labels, link, markup_style, str_labels;
      if (css_links == null) {
        css_links = null;
      }
      if (mult == null) {
        mult = null;
      }
      if (roles == null) {
        roles = null;
      }
      markup_style = ['<path class="connection" stroke="black" d="M 0 0 0 0"/>', '<path class="connection-wrap" d="M 0 0 0 0"/>', '<g class="labels"/>', '<g class="marker-vertices"/>', '<g class="marker-arrowheads"/>'];
      link = new erd.Line({
        markup: markup_style.join(''),
        source: {
          id: rel_name
        },
        target: {
          id: class_name
        }
      });
      str_labels = [null, null];
      if (roles !== null) {
        str_labels[0] = roles;
      }
      if (mult !== null) {
        str_labels[1] = mult;
      }
      labels = ["", ""];
      if (str_labels === null) {
        labels = {
          position: 0.5,
          attrs: {
            text: {
              text: "",
              fill: '#000000'
            },
            rect: {
              fill: '#f9f9f9'
            }
          }
        };
      } else if (str_labels !== null) {
        if ((str_labels[0] === null) && (str_labels[1] !== null)) {
          labels[0] = {
            position: 0.9,
            attrs: {
              text: {
                text: "",
                fill: '#000000'
              },
              rect: {
                fill: '#f9f9f9'
              }
            }
          };
          labels[1] = {
            position: 0.5,
            attrs: {
              text: {
                text: str_labels[1],
                fill: '#000000'
              },
              rect: {
                fill: '#f9f9f9'
              }
            }
          };
        } else if ((str_labels[0] !== null) && (str_labels[1] === null)) {
          labels[0] = {
            position: 0.9,
            attrs: {
              text: {
                text: str_labels[0],
                fill: '#000000'
              },
              rect: {
                fill: '#f9f9f9'
              }
            }
          };
          labels[1] = {
            position: 0.5,
            attrs: {
              text: {
                text: "",
                fill: '#000000'
              },
              rect: {
                fill: '#f9f9f9'
              }
            }
          };
        } else {
          labels[0] = {
            position: 0.9,
            attrs: {
              text: {
                text: str_labels[0],
                fill: '#000000'
              },
              rect: {
                fill: '#f9f9f9'
              }
            }
          };
          labels[1] = {
            position: 0.5,
            attrs: {
              text: {
                text: str_labels[1],
                fill: '#000000'
              },
              rect: {
                fill: '#f9f9f9'
              }
            }
          };
        }
      }
      link.set({
        labels: labels
      });
      return link;
    };

    ERDFactory.prototype.create_label = function(label) {
      return {
        labels: [
          {
            position: -20,
            attrs: {
              text: {
                dy: -8,
                text: label,
                fill: '#ffffff'
              },
              rect: {
                fill: 'none'
              }
            }
          }
        ]
      };
    };

    ERDFactory.prototype.create_generalization = function(class_a_id, class_b_id, css_links, disjoint, covering) {
      var isaattr, labels, legend, link;
      if (css_links == null) {
        css_links = null;
      }
      if (disjoint == null) {
        disjoint = false;
      }
      if (covering == null) {
        covering = false;
      }
      labels = [];
      isaattr = {
        text: {
          text: 'ISA',
          fill: '#ffffff',
          'letter-spacing': 0,
          style: {
            'text-shadow': '1px 0 1px #333333'
          }
        },
        polygon: {
          fill: '#fdb664',
          stroke: 'none',
          filter: {
            name: 'dropShadow',
            args: {
              dx: 0,
              dy: 2,
              blur: 1,
              color: '#333333'
            }
          }
        }
      };
      link = new erd.ISA({
        position: {
          x: 125,
          y: 200
        },
        attrs: isaattr
      });
      if (disjoint || covering) {
        legend = "{";
        if (disjoint) {
          legend = legend + "disjoint";
        }
        if (covering) {
          if (legend !== "") {
            legend = legend + ",";
          }
          legend = legend + "covering";
        }
        legend = legend + "}";
      }
      labels = labels.concat([
        {
          position: 0.8,
          attrs: {
            text: {
              text: legend,
              fill: '#0000ff'
            },
            rect: {
              fill: '#ffffff'
            }
          }
        }
      ]);
      link.set({
        labels: labels
      });
      return link;
    };

    ERDFactory.prototype.create_association = function(class_a_id, class_b_id, name, css_links, mult, roles) {
      var rel;
      if (css_links == null) {
        css_links = null;
      }
      if (mult == null) {
        mult = null;
      }
      if (roles == null) {
        roles = null;
      }
      rel = new erd.Relationship({
        attrs: {
          text: {
            fill: "#ffffff",
            text: name,
            'letter-spacing': 0,
            style: {
              'text-shadow': '1px 0 1px #333333'
            }
          },
          '.outer': {
            fill: '#797d9a',
            stroke: 'none',
            filter: {
              name: 'dropShadow',
              args: {
                dx: 0,
                dy: 2,
                blur: 1,
                color: '#333333'
              }
            }
          }
        }
      });
      return rel;
    };

    ERDFactory.prototype.create_association_class = function(class_name, css_class) {
      if (css_class == null) {
        css_class = null;
      }
      return this.create_class(class_name, css_class);
    };

    ERDFactory.prototype.create_association_link = function(css_assoc_links) {
      var link;
      if (css_assoc_links == null) {
        css_assoc_links = {
          "stroke-dasharray": "5,5"
        };
      }
      link = new joint.dia.Link({
        source: {
          x: 10,
          y: 10
        },
        target: {
          x: 100,
          y: 100
        },
        attrs: css_assoc_links
      });
      return link;
    };

    return ERDFactory;

  })(model.Factory);

  exports.model.eer.ERDFactory = ERDFactory;

}).call(this);
// Generated by CoffeeScript 1.10.0
(function() {
  var ERDiagram, exports, ref, ref1,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  exports = exports != null ? exports : this;

  exports.model = (ref = exports.model) != null ? ref : {};

  exports.model.eer = (ref1 = exports.model.eer) != null ? ref1 : {};

  ERDiagram = (function(superClass) {
    extend(ERDiagram, superClass);

    function ERDiagram(graph) {
      this.graph = graph != null ? graph : null;
      this.clases = [];
      this.attributes = [];
      this.isa = [];
      this.relationships = [];
      this.links = [];
      this.cells_nuevas = [];
      this.cells_deleted = [];
      this.factory = new model.eer.ERDFactory();
    }

    ERDiagram.prototype.get_factory = function() {
      return this.factory;
    };

    ERDiagram.prototype.set_factory = function(factory) {
      this.factory = factory;
    };

    ERDiagram.prototype.get_graph = function() {
      return this.graph;
    };

    ERDiagram.prototype.set_graph = function(graph) {
      this.graph = graph;
    };

    ERDiagram.prototype.get_clases = function() {
      return this.clases;
    };

    ERDiagram.prototype.get_links = function() {
      return this.links;
    };

    ERDiagram.prototype.get_attributes = function() {
      return this.attributes;
    };

    ERDiagram.prototype.get_isa = function() {
      return this.isa;
    };

    ERDiagram.prototype.get_relationships = function() {
      return this.relationships;
    };

    ERDiagram.prototype.get_last_isa_by_id = function() {
      return this.isa[this.isa.length - 1].get_isaid();
    };

    ERDiagram.prototype.get_last_rel_by_id = function() {
      return this.relationships[this.relationships.length - 1].get_relid();
    };

    ERDiagram.prototype.get_mult_from = function(relid) {
      if (this.relationships[this.relationships.length - 1].get_relid() === relid) {
        return this.relationships[this.relationships.length - 1].mult[0];
      }
    };

    ERDiagram.prototype.get_mult_to = function(relid) {
      if (this.relationships[this.relationships.length - 1].get_relid() === relid) {
        return this.relationships[this.relationships.length - 1].mult[1];
      }
    };

    ERDiagram.prototype.get_role_from = function(relid) {
      if (this.relationships[this.relationships.length - 1].get_relid() === relid) {
        return this.relationships[this.relationships.length - 1].roles[0];
      }
    };

    ERDiagram.prototype.get_role_to = function(relid) {
      if (this.relationships[this.relationships.length - 1].get_relid() === relid) {
        return this.relationships[this.relationships.length - 1].roles[1];
      }
    };

    ERDiagram.prototype.get_clase = function(nombre) {};

    ERDiagram.prototype.find_class_by_name = function(name) {
      return this.clases.find(function(elt, index, arr) {
        return elt.get_name() === name;
      });
    };

    ERDiagram.prototype.find_class_by_classid = function(classid) {
      return this.clases.find(function(elt, index, arr) {
        return elt.has_classid(classid);
      });
    };

    ERDiagram.prototype.find_attr_by_name = function(name) {
      return this.attributes.find(function(elt, index, arr) {
        return elt.get_name() === name;
      });
    };

    ERDiagram.prototype.find_attr_by_attrid = function(attrid) {
      return this.attributes.find(function(elt, index, arr) {
        return elt.has_attrid(attrid);
      });
    };

    ERDiagram.prototype.find_isa_by_name = function(name) {
      return this.isa.find(function(elt, index, arr) {
        return elt.get_name() === name;
      });
    };

    ERDiagram.prototype.find_isa_by_isaid = function(isaid) {
      return this.isa.find(function(elt, index, arr) {
        return elt.has_isaid(isaid);
      });
    };

    ERDiagram.prototype.find_rel_by_name = function(name) {
      return this.relationships.find(function(elt, index, arr) {
        return elt.get_name() === name;
      });
    };

    ERDiagram.prototype.find_rel_by_relid = function(relid) {
      return this.relationships.find(function(elt, index, arr) {
        return elt.has_relid(relid);
      });
    };

    ERDiagram.prototype.find_IsA_with_parent = function(parentclass) {
      return this.links.find(function(elt, index, arr) {
        return elt.has_parent(parentclass);
      });
    };

    ERDiagram.prototype.add_generalization = function(class_parent, class_childs, disjoint, covering) {
      var class_child_obj, class_parent_obj;
      if (disjoint == null) {
        disjoint = false;
      }
      if (covering == null) {
        covering = false;
      }
      class_parent_obj = null;
      class_child_obj = null;
      if (typeof class_parent === "string") {
        class_parent_obj = this.find_class_by_classid(class_parent);
      } else if (typeof class_parent === "object") {
        class_parent_obj = class_parent;
      }
      if (class_childs instanceof Array) {
        class_childs.forEach(function(child) {
          return this.add_generalization(class_parent, child, disjoint, covering);
        }, this);
      } else if (typeof class_childs === "string") {
        class_child_obj = this.find_class_by_classid(class_childs);
      } else if (typeof class_childs === "object") {
        class_child_obj = class_childs;
      }
      if ((class_child_obj != null) && (class_parent_obj != null)) {
        return this.add_generalization_objs(class_parent_obj, class_child_obj, disjoint, covering);
      }
    };

    ERDiagram.prototype.add_generalization_objs = function(class_parent, class_child, disjoint, covering) {
      var gen;
      if (disjoint == null) {
        disjoint = false;
      }
      if (covering == null) {
        covering = false;
      }
      gen = this.find_IsA_with_parent(class_parent);
      if ((gen === void 0) || (gen === null)) {
        gen = new model.eer.Isa(class_parent, [class_child]);
        gen.set_disjoint(disjoint);
        gen.set_covering(covering);
        return this.agregar_isa(gen);
      } else {
        gen.add_child(class_child);
        gen.create_joint(this.factory, csstheme);
        this.cells_nuevas.push(gen.get_joint_for_child(class_child));
        return this.actualizar_graph();
      }
    };

    ERDiagram.prototype.agregar_isa = function(gen) {
      this.isa.push(gen);
      this.cells_nuevas.push(gen.get_joint(this.factory, csstheme));
      return this.actualizar_graph();
    };

    ERDiagram.prototype.add_rel = function(rel) {
      this.relationships.push(rel);
      this.cells_nuevas.push(rel.get_joint(this.factory, csstheme));
      return this.actualizar_graph();
    };

    ERDiagram.prototype.add_association = function(class_a_id, class_b_id, name, mult, roles) {
      var class_a, class_b, mult_from, mult_to, newlinktoRel_from, newlinktoRel_to, newrel, rel_id, role_from, role_to;
      if (name == null) {
        name = null;
      }
      if (mult == null) {
        mult = null;
      }
      if (roles == null) {
        roles = null;
      }
      class_a = this.find_class_by_classid(class_a_id);
      class_b = this.find_class_by_classid(class_b_id);
      newrel = new model.eer.Relationship([class_a, class_b], name, mult, roles);
      if (mult !== null) {
        newrel.set_mult(mult);
      }
      if (roles !== null) {
        newrel.set_roles(roles);
      }
      this.add_rel(newrel);
      rel_id = this.get_last_rel_by_id();
      mult_from = this.get_mult_from(rel_id);
      role_from = this.get_role_from(rel_id);
      newlinktoRel_from = new model.eer.LinkRelToEntity([class_a, newrel], role_from);
      if (mult_from !== null) {
        newlinktoRel_from.set_mult(mult_from);
      }
      if (role_from !== null) {
        newlinktoRel_from.set_roles(role_from);
      }
      this.agregar_link(newlinktoRel_from);
      mult_to = this.get_mult_to(rel_id);
      role_to = this.get_role_to(rel_id);
      newlinktoRel_to = new model.eer.LinkRelToEntity([class_b, newrel], role_to);
      if (mult_to !== null) {
        newlinktoRel_to.set_mult(mult_to);
      }
      if (role_to !== null) {
        newlinktoRel_to.set_roles(role_to);
      }
      return this.agregar_link(newlinktoRel_to);
    };

    ERDiagram.prototype.add_association_class = function(class_a_id, class_b_id, name, mult, roles) {
      var class_a, class_b, newassoc;
      if (mult == null) {
        mult = null;
      }
      if (roles == null) {
        roles = null;
      }
      class_a = this.find_class_by_classid(class_a_id);
      class_b = this.find_class_by_classid(class_b_id);
      newassoc = new model.eer.LinkWithClass([class_a, class_b], name);
      if (mult !== null) {
        newassoc.set_mult(mult);
      }
      if (roles !== null) {
        newassoc.set_roles(roles);
      }
      this.agregar_link(newassoc);
      return newassoc.update_position();
    };

    ERDiagram.prototype.add_entity = function(hash_data) {
      var newclass;
      if (hash_data.attrs === void 0) {
        hash_data.attrs = [];
      }
      newclass = new model.eer.Entity(hash_data.name, hash_data.attrs);
      this.agregar_clase(newclass);
      return newclass;
    };

    ERDiagram.prototype.agregar_clase = function(clase) {
      this.clases.push(clase);
      this.cells_nuevas.push(clase.get_joint(this.factory, csstheme));
      return this.actualizar_graph();
    };

    ERDiagram.prototype.add_attribute = function(hash_data) {
      var newattribute;
      newattribute = new model.eer.Attribute(hash_data.name, hash_data.type);
      this.agregar_attribute(newattribute);
      return newattribute;
    };

    ERDiagram.prototype.agregar_attribute = function(attribute) {
      this.attributes.push(attribute);
      this.cells_nuevas.push(attribute.get_joint(this.factory, csstheme));
      return this.actualizar_graph();
    };

    ERDiagram.prototype.add_relationship_attr = function(class_id, attribute_id, name) {
      var attr, entity, newrel;
      entity = this.find_class_by_classid(class_id);
      attr = this.find_attr_by_attrid(attribute_id);
      newrel = new model.eer.LinkAttrToEntity([entity, attr], name);
      return this.agregar_link(newrel);
    };

    ERDiagram.prototype.add_relationship_isa = function(class_id, isa_id, name) {
      var entity, isa, newlinktoISA;
      entity = this.find_class_by_classid(class_id);
      isa = this.find_isa_by_isaid(isa_id);
      newlinktoISA = new model.eer.LinkISAToEntity([entity, isa], name);
      return this.agregar_link(newlinktoISA);
    };

    ERDiagram.prototype.add_relationship_isa_inverse = function(isa_id, class_id, name) {
      var entity, isa, newlinkfromISA;
      entity = this.find_class_by_classid(class_id);
      isa = this.find_isa_by_isaid(isa_id);
      newlinkfromISA = new model.eer.LinkISAToEntity([isa, entity], name);
      return this.agregar_link(newlinkfromISA);
    };

    ERDiagram.prototype.add_relationship_rel = function(class_id, rel_id, name, mult, roles) {
      var entity, newlinktoRel, rel;
      entity = this.find_class_by_classid(class_id);
      rel = this.find_rel_by_relid(rel_id);
      newlinktoRel = new model.eer.LinkRelToEntity([entity, rel], name);
      if (mult !== null) {
        newlinktoRel.set_mult(mult);
      }
      if (roles !== null) {
        newlinktoRel.set_roles(roles);
      }
      return this.agregar_link(newlinktoRel);
    };

    ERDiagram.prototype.add_relationship_rel_inverse = function(rel_id, class_id, name, mult, roles) {
      var entity, newlinkfromRel, rel;
      entity = this.find_class_by_classid(class_id);
      rel = this.find_rel_by_relid(rel_id);
      newlinkfromRel = new model.eer.LinkRelToEntity([rel, entity], name);
      if (mult !== null) {
        newlinkfromRel.set_mult(mult);
      }
      if (roles !== null) {
        newlinkfromRel.set_roles(roles);
      }
      return this.agregar_link(newlinkfromRel);
    };

    ERDiagram.prototype.delete_class = function(c) {
      this.clases = this.clases.filter(function(elt, index, arr) {
        return elt !== c;
      });
      this.remove_associated_links(c);
      this.cells_deleted = this.cells_deleted.concat(c.get_joint());
      return this.actualizar_graph();
    };

    ERDiagram.prototype.delete_attribute = function(c) {
      this.attributes = this.attributes.filter(function(elt, index, arr) {
        return elt !== c;
      });
      this.remove_associated_links(c);
      this.cells_deleted = this.cells_deleted.concat(c.get_joint());
      return this.actualizar_graph();
    };

    ERDiagram.prototype.find_associated_links = function(c) {
      return this.links.filter(function(link, indx, arr) {
        return link.is_associated(c);
      }, this);
    };

    ERDiagram.prototype.remove_associated_links = function(c) {
      var lst;
      lst = this.find_associated_links(c);
      return lst.forEach(function(link, indx, arr) {
        return this.delete_link(link);
      }, this);
    };

    ERDiagram.prototype.rename_class = function(classid, name) {
      var c;
      c = this.find_class_by_classid(classid);
      if (c !== null) {
        return c.set_name(name);
      }
    };

    ERDiagram.prototype.delete_link = function(link) {
      this.links = this.links.filter(function(elt, index, arr) {
        return elt !== link;
      });
      this.cells_deleted = this.cells_deleted.concat(link.get_joint());
      return this.actualizar_graph();
    };

    ERDiagram.prototype.update_view = function(class_id, paper) {
      var class_obj;
      class_obj = this.find_class_by_classid(class_id);
      if (class_obj !== null) {
        return class_obj.update_view(paper);
      }
    };

    ERDiagram.prototype.delete_class_by_name = function(name) {
      var c;
      c = this.find_class_by_name(name);
      if (c !== void 0) {
        return this.delete_class(c);
      }
    };

    ERDiagram.prototype.delete_class_by_classid = function(classid) {
      var c;
      c = this.find_class_by_classid(classid);
      if (c !== void 0) {
        return this.delete_class(c);
      }
    };

    ERDiagram.prototype.delete_attr_by_attrid = function(attrid) {
      var c;
      c = this.find_attr_by_attrid(attrid);
      if (c !== void 0) {
        return this.delete_attribute(c);
      }
    };

    ERDiagram.prototype.reset = function() {
      this.clases.forEach(function(c, i, arr) {
        return this.delete_class(c);
      }, this);
      this.attributes.forEach(function(a, i, arr) {
        return this.delete_attribute(a);
      }, this);
      this.links.forEach(function(l, i, arr) {
        return this.delete_link(l);
      }, this);
      return this.actualizar_graph();
    };

    ERDiagram.prototype.agregar_link = function(link) {
      this.links.push(link);
      this.cells_nuevas.push(link.get_joint(this.factory, csstheme));
      return this.actualizar_graph();
    };

    ERDiagram.prototype.set_satisfiable = function(classes_list) {
      return classes_list.forEach(function(class_name, i, arr) {
        return this.set_class_satisfiable(class_name);
      }, this);
    };

    ERDiagram.prototype.set_class_satisfiable = function(class_name) {
      var c;
      c = this.find_class_by_name(class_name);
      if (c != null) {
        return c.set_unsatisfiable(false, csstheme);
      }
    };

    ERDiagram.prototype.set_unsatisfiable = function(classes_list) {
      return classes_list.forEach(function(class_name, i, arr) {
        return this.set_class_unsatisfiable(class_name);
      }, this);
    };

    ERDiagram.prototype.set_class_unsatisfiable = function(class_name) {
      var c;
      c = this.find_class_by_name(class_name);
      if (c != null) {
        return c.set_unsatisfiable(true, csstheme);
      }
    };

    ERDiagram.prototype.actualizar_graph = function() {
      if (this.graph !== null) {
        this.graph.addCell(this.cells_nuevas);
        this.cells_deleted.forEach(function(elt, index, arr) {
          return elt.remove();
        });
      }
      this.cells_deleted = [];
      return this.cells_nuevas = [];
    };

    ERDiagram.prototype.to_json = function() {
      var attributes_json, classes_json, links_json;
      classes_json = $.map(this.clases, function(myclass) {
        return myclass.to_json();
      });
      attributes_json = $.map(this.attributes, function(myattr) {
        return myattr.to_json();
      });
      links_json = $.map(this.links, function(mylink) {
        return mylink.to_json();
      });
      return {
        classes: classes_json,
        attributes: attributes_json,
        links: links_json
      };
    };

    ERDiagram.prototype.import_json = function(json) {
      json.classes.forEach(function(elt, index, arr) {
        var c;
        return c = this.add_entity(elt);
      }, this);
      json.attributes.forEach(function(elt, index, arr) {
        var c;
        return c = this.add_attribute(elt);
      }, this);
      return json.links.forEach(function(elt, index, arr) {
        var attr_a, class_a, class_b, class_parent, classes_children, covering, disjoint;
        if (elt.type === "association") {
          class_a = this.find_class_by_name(elt.classes[0]);
          class_b = this.find_class_by_name(elt.classes[1]);
          if (elt.associated_class != null) {
            this.add_association_class(class_a.get_classid(), class_b.get_classid(), elt.name, elt.multiplicity, elt.roles);
          } else {
            this.add_association(class_a.get_classid(), class_b.get_classid(), elt.name, elt.multiplicity, elt.roles);
          }
        }
        if (elt.type === "generalization") {
          class_parent = this.find_class_by_name(elt.parent);
          classes_children = elt.classes.map(function(childname) {
            return this.find_class_by_name(childname);
          }, this);
          disjoint = elt.constraint.includes("disjoint");
          covering = elt.constraint.includes("covering");
          this.add_generalization(class_parent, classes_children, disjoint, covering);
        }
        if (elt.type === "attribute") {
          class_a = this.find_class_by_name(elt.classes[0]);
          attr_a = this.find_attr_by_name(elt.classes[1]);
          return this.add_relationship_attr(class_a.get_classid(), attr_a.get_attributeid(), elt.name);
        }
      }, this);
    };

    return ERDiagram;

  })(model.Diagram);

  exports.model.eer.ERDiagram = ERDiagram;

}).call(this);
// Generated by CoffeeScript 1.10.0
(function() {
  var Entity, exports, ref, ref1,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  exports = exports != null ? exports : this;

  exports.model = (ref = exports.model) != null ? ref : {};

  exports.model.eer = (ref1 = exports.model.eer) != null ? ref1 : {};

  Entity = (function(superClass) {
    extend(Entity, superClass);

    function Entity(name, attrs) {
      this.attrs = attrs != null ? attrs : null;
      Entity.__super__.constructor.call(this, name);
      this.joint = null;
      this.unsatisfiable = false;
      this.on_change_objs = [];
    }

    Entity.prototype.get_name = function() {
      return this.name;
    };

    Entity.prototype.set_name = function(name1) {
      this.name = name1;
      if (this.joint !== null) {
        return this.joint[0].set("name", this.name);
      }
    };

    Entity.prototype.get_attrs = function() {
      return this.attrs;
    };

    Entity.prototype.set_unsatisfiable = function(bool, csstheme) {
      if (csstheme == null) {
        csstheme = null;
      }
      this.unsatisfiable = bool;
      if (csstheme != null) {
        return this.set_theme(csstheme);
      }
    };

    Entity.prototype.set_theme = function(csstheme) {
      if ((this.joint != null) && (this.joint.length > 0)) {
        if (this.unsatisfiable) {
          return this.joint[0].set('attrs', csstheme.css_class_unsatisfiable);
        } else {
          return this.joint[0].set('attrs', csstheme.css_class);
        }
      }
    };

    Entity.prototype.create_joint = function(factory, csstheme) {
      var cssclass;
      if (csstheme == null) {
        csstheme = null;
      }
      if (this.joint == null) {
        this.joint = [];
        if (csstheme != null) {
          if (this.unsatisfiable) {
            return cssclass = csstheme.css_class_unsatisfiable;
          } else {
            cssclass = csstheme.css_class;
            return this.joint.push(factory.create_class(this.name, this.attrs, cssclass));
          }
        } else {
          return this.joint.push(factory.create_class(this.name, this.attrs));
        }
      }
    };

    Entity.prototype.to_json = function() {
      var json;
      json = Entity.__super__.to_json.call(this);
      if (this.joint != null) {
        json.position = this.joint[0].position();
      }
      return json;
    };

    Entity.prototype.attach_my_event_handlers = function() {
      if (this.joint != null) {
        if (this.joint[0].mymodel_class == null) {
          this.joint[0].mymodel_class = this;
          return this.joint[0].on('change:position', function() {
            return this.mymodel_class.notify_change_position(this);
          });
        }
      }
    };

    Entity.prototype.attach_on_change_position = function(object) {
      this.attach_my_event_handlers();
      return this.on_change_objs.push(object);
    };

    Entity.prototype.notify_change_position = function(model) {
      return this.on_change_objs.forEach(function(obj, indx, arr) {
        return obj.update_position();
      });
    };

    return Entity;

  })(model.MyModel);

  exports.model.eer.Entity = Entity;

}).call(this);
// Generated by CoffeeScript 1.10.0
(function() {
  var Attribute, exports, ref, ref1,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  exports = exports != null ? exports : this;

  exports.model = (ref = exports.model) != null ? ref : {};

  exports.model.eer = (ref1 = exports.model.eer) != null ? ref1 : {};

  Attribute = (function(superClass) {
    extend(Attribute, superClass);

    function Attribute(name, type) {
      this.type = type != null ? type : null;
      Attribute.__super__.constructor.call(this, name);
      this.joint = null;
      this.unsatisfiable = false;
      this.on_change_objs = [];
    }

    Attribute.prototype.get_name = function() {
      return this.name;
    };

    Attribute.prototype.set_name = function(name1) {
      this.name = name1;
      if (this.joint !== null) {
        return this.joint[0].set("name", this.name);
      }
    };

    Attribute.prototype.get_attr_type = function() {
      return this.type;
    };

    Attribute.prototype.create_joint = function(factory, csstheme) {
      var cssclass;
      if (csstheme == null) {
        csstheme = null;
      }
      if (this.joint == null) {
        this.joint = [];
        if (csstheme != null) {
          if (this.unsatisfiable) {
            return cssclass = csstheme.css_class_unsatisfiable;
          } else {
            cssclass = csstheme.css_class;
            return this.joint.push(factory.create_attribute(this.name, this.type, cssclass));
          }
        } else {
          return this.joint.push(factory.create_attribute(this.name, this.type));
        }
      }
    };

    Attribute.prototype.to_json = function() {
      var json;
      json = Attribute.__super__.to_json.call(this);
      json.type = this.type;
      delete json.attrs;
      delete json.methods;
      return json;
    };

    return Attribute;

  })(model.MyModel);

  exports.model.eer.Attribute = Attribute;

}).call(this);
// Generated by CoffeeScript 1.10.0
(function() {
  var Isa, exports, ref, ref1,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  exports = exports != null ? exports : this;

  exports.model = (ref = exports.model) != null ? ref : {};

  exports.model.eer = (ref1 = exports.model.eer) != null ? ref1 : {};

  Isa = (function(superClass) {
    extend(Isa, superClass);

    function Isa(parent_class, classes, name) {
      this.parent_class = parent_class;
      this.classes = classes;
      if (name == null) {
        name = null;
      }
      Isa.__super__.constructor.call(this, this.classes, name);
      this.disjoint = false;
      this.covering = false;
    }

    Isa.prototype.get_joint = function(factory, csstheme) {
      if (factory == null) {
        factory = null;
      }
      if (csstheme == null) {
        csstheme = null;
      }
      Isa.__super__.get_joint.call(this, factory, csstheme);
      if (this.joint.length < this.classes.length) {
        if (factory !== null) {
          this.create_joint(factory, csstheme);
        }
      }
      return this.joint;
    };

    Isa.prototype.create_joint = function(factory, csstheme) {
      if (csstheme == null) {
        csstheme = null;
      }
      if (csstheme === null) {
        csstheme = {
          css_links: null
        };
      }
      if ((this.joint === null) || (this.joint.length < this.classes.length)) {
        this.joint = [];
        return this.classes.forEach(function(elt, index, arr) {
          var covering, disjoint;
          if (!this.has_joint_instance(elt)) {
            if (index === 0) {
              disjoint = this.disjoint;
              covering = this.covering;
            } else {
              disjoint = covering = false;
            }
            return this.joint.push(factory.create_generalization(this.parent_class.get_classid(), elt.get_classid(), csstheme.css_links, disjoint, covering));
          }
        }, this);
      }
    };

    Isa.prototype.has_joint_instance = function(elt) {
      var classid, founded;
      classid = elt.get_classid();
      founded = this.joint.find(function(elt, index, arr) {
        return elt.get('source').id === classid;
      });
      return founded != null;
    };

    Isa.prototype.get_joint_for_child = function(classchild) {
      var classid, founded;
      classid = classchild.get_classid();
      founded = this.joint.find(function(elt, index, arr) {
        return elt.get('source').id === classid;
      });
      return founded;
    };

    Isa.prototype.has_parent = function(parentclass) {
      return this.parent_class === parentclass;
    };

    Isa.prototype.add_child = function(childclass) {
      return this.classes.push(childclass);
    };

    Isa.prototype.set_disjoint = function(disjoint1) {
      this.disjoint = disjoint1;
    };

    Isa.prototype.set_covering = function(covering1) {
      this.covering = covering1;
    };

    Isa.prototype.get_disjoint = function() {
      return this.disjoint;
    };

    Isa.prototype.get_covering = function() {
      return this.covering;
    };

    Isa.prototype.to_json = function() {
      var constraint, json;
      json = Isa.__super__.to_json.call(this);
      json.parent = this.parent_class.get_name();
      json.multiplicity = null;
      json.type = "generalization";
      constraint = [];
      if (this.disjoint) {
        constraint.push("disjoint");
      }
      if (this.covering) {
        constraint.push("covering");
      }
      json.constraint = constraint;
      return json;
    };

    return Isa;

  })(model.uml.Link);

  exports.model.eer.Isa = Isa;

}).call(this);
// Generated by CoffeeScript 1.10.0
(function() {
  var Relationship, exports, ref, ref1,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  exports = exports != null ? exports : this;

  exports.model = (ref = exports.model) != null ? ref : {};

  exports.model.eer = (ref1 = exports.model.eer) != null ? ref1 : {};

  Relationship = (function(superClass) {
    extend(Relationship, superClass);

    function Relationship(classes, name) {
      this.classes = classes;
      if (name == null) {
        name = null;
      }
      if (name != null) {
        Relationship.__super__.constructor.call(this, this.classes, name);
      } else {
        Relationship.__super__.constructor.call(this, this.classes, Relationship.get_new_name());
      }
      this.mult = [null, null];
      this.roles = [null, null];
    }

    Relationship.prototype.set_mult = function(mult1) {
      var i, j, len, m, ref2, results;
      this.mult = mult1;
      ref2 = this.mult;
      results = [];
      for (i = j = 0, len = ref2.length; j < len; i = ++j) {
        m = ref2[i];
        results.push(this.change_to_null(m, i));
      }
      return results;
    };

    Relationship.prototype.set_roles = function(roles) {
      this.roles = roles;
    };

    Relationship.prototype.change_to_null = function(mult, index) {
      if ((mult === "0..*") || (mult === "0..n")) {
        return this.mult[index] = null;
      }
    };

    Relationship.prototype.set_from = function(class_from) {
      return this.classes[0] = class_from;
    };

    Relationship.prototype.get_from = function() {
      return this.classes[0];
    };

    Relationship.prototype.set_to = function(class_to) {
      return this.classes[1] = class_to;
    };

    Relationship.prototype.get_to = function() {
      return this.classes[1];
    };

    Relationship.prototype.get_classes = function() {
      return this.classes;
    };

    Relationship.prototype.is_two_linked = function() {
      return this.classes.length === 2;
    };

    Relationship.prototype.has_parent = function(parentclass) {
      return false;
    };

    Relationship.prototype.is_associated = function(c) {
      return this.has_parent(c) || this.classes.includes(c);
    };

    Relationship.prototype.to_json = function() {
      var json;
      json = Relationship.__super__.to_json.call(this);
      json.classes = $.map(this.classes, function(myclass) {
        return myclass.get_name();
      });
      json.multiplicity = this.mult;
      json.roles = this.roles;
      json.type = "relationship";
      return json;
    };

    Relationship.prototype.create_joint = function(factory, csstheme) {
      if (csstheme == null) {
        csstheme = null;
      }
      if (this.joint === null) {
        this.joint = [];
        if (csstheme !== null) {
          return this.joint.push(factory.create_association(this.classes[0].get_classid(), this.classes[1].get_classid(), this.name, csstheme.css_links, this.mult, this.roles));
        } else {
          return this.joint.push(factory.create_association(this.classes[0].get_classid(), this.classes[1].get_classid(), this.name, null, this.mult, this.roles));
        }
      }
    };

    Relationship.prototype.same_elts = function(other) {
      var all_same, fn, index, j, k, l, len, len1, n, ref2, ref3, ref4, v;
      if (!Relationship.__super__.same_elts.call(this, other)) {
        return false;
      }
      if (this.classes.length !== other.classes.length) {
        return false;
      }
      all_same = true;
      fn = (function(_this) {
        return function(index) {
          return all_same = all_same && _this.classes[index].same_elts(other.classes[index]);
        };
      })(this);
      for (index = j = 0, ref2 = this.classes.length; 0 <= ref2 ? j < ref2 : j > ref2; index = 0 <= ref2 ? ++j : --j) {
        fn(index);
      }
      ref3 = this.mult;
      for (k = l = 0, len = ref3.length; l < len; k = ++l) {
        v = ref3[k];
        all_same = all_same && v === other.mult[k];
      }
      ref4 = this.roles;
      for (k = n = 0, len1 = ref4.length; n < len1; k = ++n) {
        v = ref4[k];
        all_same = all_same && v === other.roles[k];
      }
      return all_same;
    };

    return Relationship;

  })(model.uml.Link);

  Relationship.get_new_name = function() {
    if (Relationship.name_number === void 0) {
      Relationship.name_number = 0;
    }
    Relationship.name_number = Relationship.name_number + 1;
    return "R" + Relationship.name_number;
  };

  exports.model.eer.Relationship = Relationship;

}).call(this);
// Generated by CoffeeScript 1.10.0
(function() {
  var LinkAttrToEntity, exports, ref, ref1,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  exports = exports != null ? exports : this;

  exports.model = (ref = exports.model) != null ? ref : {};

  exports.model.eer = (ref1 = exports.model.eer) != null ? ref1 : {};

  LinkAttrToEntity = (function(superClass) {
    extend(LinkAttrToEntity, superClass);

    function LinkAttrToEntity(classes, name) {
      this.classes = classes;
      if (name == null) {
        name = null;
      }
      LinkAttrToEntity.__super__.constructor.call(this, this.classes, name);
    }

    LinkAttrToEntity.prototype.get_name = function() {
      return this.name;
    };

    LinkAttrToEntity.prototype.create_joint = function(factory, csstheme) {
      if (csstheme == null) {
        csstheme = null;
      }
      if (this.joint === null) {
        this.joint = [];
        if (csstheme !== null) {
          return this.joint.push(factory.create_link_attribute(this.classes[0].get_classid(), this.classes[1].get_attributeid(), this.name, csstheme.css_links));
        } else {
          return this.joint.push(factory.create_link_attribute(this.classes[0].get_classid(), this.classes[1].get_attributeid(), this.name, null));
        }
      }
    };

    LinkAttrToEntity.prototype.to_json = function() {
      var json;
      json = LinkAttrToEntity.__super__.to_json.call(this);
      delete json.multiplicity;
      delete json.roles;
      json.type = "attribute";
      return json;
    };

    return LinkAttrToEntity;

  })(model.uml.Link);

  exports.model.eer.LinkAttrToEntity = LinkAttrToEntity;

}).call(this);
// Generated by CoffeeScript 1.10.0
(function() {
  var LinkISAToEntity, exports, ref, ref1,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  exports = exports != null ? exports : this;

  exports.model = (ref = exports.model) != null ? ref : {};

  exports.model.eer = (ref1 = exports.model.eer) != null ? ref1 : {};

  LinkISAToEntity = (function(superClass) {
    extend(LinkISAToEntity, superClass);

    function LinkISAToEntity(classes, name) {
      this.classes = classes;
      if (name == null) {
        name = null;
      }
      LinkISAToEntity.__super__.constructor.call(this, this.classes, name);
    }

    LinkISAToEntity.prototype.get_name = function() {
      return this.name;
    };

    LinkISAToEntity.prototype.create_joint = function(factory, csstheme) {
      if (csstheme == null) {
        csstheme = null;
      }
      if (this.joint === null) {
        this.joint = [];
        if (csstheme !== null) {
          return this.joint.push(factory.create_link_attribute(this.classes[0].get_classid(), this.classes[1].get_isaid(), this.name, csstheme.css_links));
        } else {
          return this.joint.push(factory.create_link_attribute(this.classes[0].get_classid(), this.classes[1].get_isaid(), this.name, null));
        }
      }
    };

    LinkISAToEntity.prototype.to_json = function() {
      var json;
      json = LinkISAToEntity.__super__.to_json.call(this);
      json.type = "isa";
      return json;
    };

    return LinkISAToEntity;

  })(model.eer.LinkAttrToEntity);

  exports.model.eer.LinkISAToEntity = LinkISAToEntity;

}).call(this);
// Generated by CoffeeScript 1.10.0
(function() {
  var LinkRelToEntity, exports, ref, ref1,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  exports = exports != null ? exports : this;

  exports.model = (ref = exports.model) != null ? ref : {};

  exports.model.eer = (ref1 = exports.model.eer) != null ? ref1 : {};

  LinkRelToEntity = (function(superClass) {
    extend(LinkRelToEntity, superClass);

    function LinkRelToEntity(classes, name) {
      this.classes = classes;
      if (name == null) {
        name = null;
      }
      LinkRelToEntity.__super__.constructor.call(this, this.classes, name);
      this.mult = [null];
      this.roles = [name];
    }

    LinkRelToEntity.prototype.get_name = function() {
      return this.name;
    };

    LinkRelToEntity.prototype.get_mult = function() {
      return this.mult;
    };

    LinkRelToEntity.prototype.get_role = function() {
      return this.roles;
    };

    LinkRelToEntity.prototype.set_mult = function(mult1) {
      var i, len, m, ref2, results;
      this.mult = mult1;
      ref2 = this.mult;
      results = [];
      for (i = 0, len = ref2.length; i < len; i++) {
        m = ref2[i];
        results.push(this.change_to_null(m));
      }
      return results;
    };

    LinkRelToEntity.prototype.set_roles = function(role) {
      this.role = role;
    };

    LinkRelToEntity.prototype.change_to_null = function(mult) {
      if ((mult === "0..*") || (mult === "0..n")) {
        return this.mult[0] = null;
      }
    };

    LinkRelToEntity.prototype.create_joint = function(factory, csstheme) {
      if (csstheme == null) {
        csstheme = null;
      }
      if (this.joint === null) {
        this.joint = [];
        if (csstheme !== null) {
          return this.joint.push(factory.create_link_relationship(this.classes[0].get_classid(), this.classes[1].get_relid(), this.name, this.mult, this.roles, csstheme.css_links));
        } else {
          return this.joint.push(factory.create_link_relationship(this.classes[0].get_classid(), this.classes[1].get_relid(), this.name, this.mult, this.roles, null));
        }
      }
    };

    LinkRelToEntity.prototype.to_json = function() {
      var json;
      json = LinkRelToEntity.__super__.to_json.call(this);
      json.type = "relationship";
      return json;
    };

    return LinkRelToEntity;

  })(model.eer.LinkAttrToEntity);

  LinkRelToEntity.get_new_name = function() {
    if (LinkRelToEntity.name_number === void 0) {
      LinkRelToEntity.name_number = 0;
    }
    LinkRelToEntity.name_number = LinkRelToEntity.name_number + 1;
    return "r" + LinkRelToEntity.name_number;
  };

  exports.model.eer.LinkRelToEntity = LinkRelToEntity;

}).call(this);
