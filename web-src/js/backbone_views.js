// Generated by CoffeeScript 1.4.0
var ClassOptionsView, exports;

ClassOptionsView = Backbone.View.extend({
  initialize: function() {
    this.render();
    return this.$el.hide();
  },
  render: function() {
    var template;
    template = _.template($("#template_classoptions").html());
    return this.$el.html(template({
      classid: this.classid
    }));
  },
  events: {
    "click a#deleteclass_button": "delete_class",
    "click a#editclass_button": "edit_class"
  },
  set_classid: function(classid) {
    var viewpos;
    this.classid = classid;
    viewpos = graph.getCell(this.classid).findView(paper).getBBox();
    this.$el.css({
      top: viewpos.y,
      left: viewpos.x,
      position: 'absolute',
      'z-index': 1
    });
    return this.$el.show();
  },
  get_classid: function() {
    return this.classid;
  },
  delete_class: function(event) {
    gui.gui_instance.hide_options();
    return gui.gui_instance.delete_class(this.classid);
  },
  edit_class: function(event) {
    gui.gui_instance.hide_options();
    gui.gui_instance.set_editclass_classid(this.classid);
    return this.hide();
  },
  hide: function() {
    return this.$el.hide();
  }
});

exports = exports != null ? exports : this;

exports.ClassOptionsView = ClassOptionsView;
// Generated by CoffeeScript 1.4.0
var CreateClassView, exports;

CreateClassView = Backbone.View.extend({
  initialize: function() {
    return this.render();
  },
  render: function() {
    var template;
    template = _.template($("#template_tools_navbar").html(), {});
    return this.$el.html(template);
  },
  events: {
    "click a#crearclase_button": "create_class",
    "click a#translate_button": "translate_owllink",
    "click a#insertowllink_button": "insert_owllink",
    "click a#resetall_button": "reset_all",
    "click a#importjson_open_dialog": "import_json",
    "click a#exportjson_open_dialog": "export_json",
    "click a#meta_erd_button": "meta_to_erd"
  },
  meta_to_erd: function(event) {
    console.log(event);
    return guiinst.to_erd();
  },
  create_class: function(event) {
    return guiinst.add_object_type({
      name: $("#crearclase_input").val()
    });
  },
  translate_owllink: function(event) {
    return guiinst.translate_owllink();
  },
  get_translation_format: function() {
    return $("#format_select")[0].value;
  },
  insert_owllink: function() {
    return guiinst.show_insert_owllink();
  },
  reset_all: function() {
    return guiinst.reset_all();
  },
  import_json: function() {
    return guiinst.show_import_json();
  },
  export_json: function() {
    return guiinst.show_export_json();
  }
});

exports = exports != null ? exports : this;

exports.CreateClassView = CreateClassView;
// Generated by CoffeeScript 1.4.0
var EditClassView, exports;

EditClassView = Backbone.View.extend({
  initialize: function() {
    this.render();
    return this.$el.hide();
  },
  render: function() {
    var template;
    template = _.template($("#template_editclass").html());
    return this.$el.html(template({
      classid: this.classid
    }));
  },
  events: {
    "click a#editclass_button": "edit_class",
    "click a#close_button": "hide"
  },
  set_classid: function(classid) {
    var viewpos;
    this.classid = classid;
    viewpos = graph.getCell(this.classid).findView(paper).getBBox();
    this.$el.css({
      top: viewpos.y,
      left: viewpos.x,
      position: 'absolute',
      'z-index': 1
    });
    return this.$el.show();
  },
  get_classid: function() {
    return this.classid;
  },
  edit_class: function(event) {
    var name;
    name = $("#editclass_input").val();
    gui.gui_instance.edit_class_name(this.classid, name);
    return gui.gui_instance.hide_options();
  },
  hide: function() {
    return this.$el.hide();
  }
});

exports = exports != null ? exports : this;

exports.EditClassView = EditClassView;
// Generated by CoffeeScript 1.4.0
var ErrorWidgetView, exports;

ErrorWidgetView = Backbone.View.extend({
  initialize: function() {
    this.render();
    return this.$el.find(".error-popup").popup();
  },
  render: function() {
    var template;
    template = _.template($("#template_errorwidget").html());
    return this.$el.html(template());
  },
  show: function(status, message) {
    $(".error-popup").popup("open");
    $("#errorstatus_text").html(status);
    $("#errormsg_text").html(message);
    return console.log(status + " - " + message);
  },
  events: {
    "click a#errorwidget_hide_btn": "hide"
  },
  hide: function() {
    return $(".error-popup").popup("close");
  }
});

exports = exports != null ? exports : this;

exports.ErrorWidgetView = ErrorWidgetView;
// Generated by CoffeeScript 1.4.0
var ExportJSONView, exports;

ExportJSONView = Backbone.View.extend({
  initialize: function() {
    this.jsonstr = "";
    return this.render();
  },
  render: function() {
    var template;
    template = _.template($("#template_exportjson").html());
    this.$el.html(template({
      jsonstr: this.jsonstr
    }));
    return this.$el.enhanceWithin();
  },
  events: {
    "click a#exportjson_copybtn": "copy_jsonstr",
    "click a#exportjson_refreshbtn": "refresh"
  },
  copy_jsonstr: function() {
    console.log("Copying: " + this.jsonstr);
    return document.execCommand("copy", false, this.jsonstr);
  },
  refresh: function() {
    return guiinst.refresh_export_json();
  },
  set_jsonstr: function(jsonstr) {
    this.jsonstr = jsonstr;
    return this.render();
  }
});

exports = exports != null ? exports : this;

exports.ExportJSONView = ExportJSONView;
// Generated by CoffeeScript 1.4.0
var ImportJSONView, exports;

ImportJSONView = Backbone.View.extend({
  initialize: function() {
    this.render();
    this.$el.find(".importjson-popup").popup();
    return $("#importjson_importbtn").on('click', this.do_import);
  },
  render: function() {
    var template;
    template = _.template($("#template_importjson").html());
    return this.$el.html(template());
  },
  show: function() {
    return $(".importjson-popup").popup("open");
  },
  events: {
    "click a#importjson_importbtn": "do_import"
  },
  do_import: function() {
    var jsonstr;
    console.log("Doing import now!");
    $(".importjson-popup").popup("close");
    jsonstr = $("#importjson_input").val();
    return guiinst.import_jsonstr(jsonstr);
  }
});

exports = exports != null ? exports : this;

exports.ImportJSONView = ImportJSONView;
// Generated by CoffeeScript 1.4.0
var IsaOptionsView, exports;

IsaOptionsView = Backbone.View.extend({
  initialize: function() {
    this.render();
    return this.$el.hide();
  },
  render: function() {
    var template;
    template = _.template($("#template_isaoptions").html());
    return this.$el.html(template({
      classid: this.classid
    }));
  },
  events: {
    'click a#isa_button': 'new_isa'
  },
  new_isa: function() {
    var covering, disjoint;
    disjoint = $("#chk-disjoint").prop("checked");
    covering = $("#chk-covering").prop("checked");
    return guiinst.set_isa_state(this.classid, disjoint, covering);
  },
  set_classid: function(classid) {
    var viewpos;
    this.classid = classid;
    viewpos = graph.getCell(this.classid).findView(paper).getBBox();
    this.$el.css({
      top: viewpos.height * 3 + viewpos.y,
      left: viewpos.x,
      position: 'absolute',
      'z-index': 1
    });
    return this.$el.show();
  },
  get_classid: function() {
    return this.classid;
  },
  hide: function() {
    return this.$el.hide();
  }
});

exports = exports != null ? exports : this;

exports.IsaOptionsView = IsaOptionsView;
// Generated by CoffeeScript 1.4.0
var OWLlinkInsertView, exports;

OWLlinkInsertView = Backbone.View.extend({
  initialize: function() {
    this.render();
    return this.textarea = this.$el.find("#insert_owllink_input");
  },
  render: function() {
    var template;
    template = _.template($("#template_insertowllink").html());
    return this.$el.html(template());
  },
  events: {
    "click a#insert_owlclass": "insert_class"
  },
  get_owllink: function() {
    return this.textarea[0].value;
  },
  set_owllink: function(str) {
    return this.textarea[0].value = str;
  },
  append_owllink: function(str) {
    return this.textarea[0].value = this.textarea[0].value + str;
  },
  insert_class: function() {
    return this.append_owllink("<owl:Class IRI=\"CLASSNAME\" />");
  }
});

exports = exports != null ? exports : this;

exports.OWLlinkInsertView = OWLlinkInsertView;
// Generated by CoffeeScript 1.4.0
var RelationOptionsView, exports;

RelationOptionsView = Backbone.View.extend({
  initialize: function() {
    this.render();
    return this.$el.hide();
  },
  render: function() {
    var template;
    template = _.template($("#template_relationoptions").html());
    return this.$el.html(template({
      classid: this.classid
    }));
  },
  events: {
    "click a#cardfrom_accept": "cardfrom",
    "click a#cardto_accept": "cardto",
    "click a#association_button": "new_relation",
    "click a#assoc_class_button": "new_assoc_class"
  },
  cardfrom: function(from) {
    var from_1, from_2, from_aux;
    from_1 = $('#cardfrom-1').val();
    console.log(from_1);
    from_aux = from_1.concat("..");
    from_2 = $('#cardfrom-2').val();
    console.log(from_2);
    this.from = from_aux.concat(from_2);
    return this.from_role = $('#role-from').val();
  },
  cardto: function(too) {
    var too_1, too_2, too_aux;
    too_1 = $('#cardto-1').val();
    console.log(too_1);
    too_aux = too_1.concat("..");
    too_2 = $('#cardto-2').val();
    console.log(too_2);
    this.too = too_aux.concat(too_2);
    return this.to_role = $('#role-to').val();
  },
  new_relation: function(from, too) {
    var mult, name, roles;
    mult = [];
    mult[0] = this.from;
    mult[1] = this.too;
    roles = [];
    roles[0] = this.from_role;
    roles[1] = this.to_role;
    name = $("#assoc_name").val();
    console.log("New association without class:");
    console.log(mult);
    return gui.gui_instance.set_association_state(this.classid, mult, roles, name, false);
  },
  new_assoc_class: function(from, too) {
    var mult, name, roles;
    mult = [];
    mult[0] = this.from;
    mult[1] = this.too;
    roles = [];
    roles[0] = this.from_role;
    roles[1] = this.to_role;
    name = $("#assoc_name").val();
    console.log("New association with class: " + name);
    console.log(mult);
    return gui.gui_instance.set_association_state(this.classid, mult, roles, name, true);
  },
  map_to_mult: function(str) {
    switch (str) {
      case "zeromany":
        return "0..*";
      case "onemany":
        return "1..*";
      case "zeroone":
        return "0..1";
      case "oneone":
        return "1..1";
    }
  },
  set_classid: function(classid) {
    var viewpos;
    this.classid = classid;
    viewpos = graph.getCell(this.classid).findView(paper).getBBox();
    this.$el.css({
      top: viewpos.y,
      left: viewpos.x + viewpos.width,
      position: 'absolute',
      'z-index': 1
    });
    return this.$el.show();
  },
  get_classid: function() {
    return this.classid;
  },
  hide: function() {
    return this.$el.hide();
  }
});

exports = exports != null ? exports : this;

exports.RelationOptionsView = RelationOptionsView;
// Generated by CoffeeScript 1.4.0
var TrafficLightsView, exports;

TrafficLightsView = Backbone.View.extend({
  initialize: function() {
    return this.render();
  },
  render: function() {
    var template;
    template = _.template($("#template_trafficlight").html(), {});
    return this.$el.html(template);
  },
  events: {
    "click a#traffic_btn": "check_satisfiable"
  },
  check_satisfiable: function(event) {
    return gui.gui_instance.check_satisfiable();
  },
  turn_red: function() {
    return this.$el.find("#traffic_img").attr("src", "imgs/h-traffic-light-red.svg");
  },
  turn_green: function() {
    return this.$el.find("#traffic_img").attr("src", "imgs/h-traffic-light-green.svg");
  },
  turn_yellow: function() {
    return this.$el.find("#traffic_img").attr("src", "imgs/h-traffic-light-yellow.svg");
  },
  turn_yellow_flashing: function() {
    return this.$el.find("#traffic_img").attr("src", "imgs/h-traffic-light-red-flashing.svg");
  },
  turn_red_flashing: function() {
    return this.$el.find("#traffic_img").attr("src", "imgs/h-traffic-light-red-flashing.svg");
  },
  turn_all: function() {
    return this.$el.find("#traffic_img").attr("src", "imgs/h-traffic-light.svg");
  }
});

exports = exports != null ? exports : this;

exports.TrafficLightsView = TrafficLightsView;
