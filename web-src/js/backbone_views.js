// Generated by CoffeeScript 1.10.0
(function() {
  var ClassOptionsView, exports, ref;

  exports = exports != null ? exports : this;

  exports.views = (ref = exports.views) != null ? ref : this;

  ClassOptionsView = Backbone.View.extend({
    initialize: function() {
      this.render();
      return this.$el.hide();
    },
    render: function() {
      var template;
      template = _.template($("#template_classoptions").html());
      return this.$el.html(template({
        classid: this.classid
      }));
    },
    events: {
      "click a#deleteclass_button": "delete_class",
      "click a#editclass_button": "edit_class"
    },
    set_classid: function(classid) {
      var viewpos;
      this.classid = classid;
      viewpos = graph.getCell(this.classid).findView(paper).getBBox();
      this.$el.css({
        top: viewpos.y + 50,
        left: viewpos.x,
        position: 'absolute',
        'z-index': 1
      });
      return this.$el.show();
    },
    get_classid: function() {
      return this.classid;
    },
    delete_class: function(event) {
      gui.gui_instance.hide_options();
      return gui.gui_instance.delete_class(this.classid);
    },
    edit_class: function(event) {
      gui.gui_instance.hide_options();
      gui.gui_instance.set_editclass_classid(this.classid);
      return this.hide();
    },
    hide: function() {
      return this.$el.hide();
    }
  });

  exports.views.ClassOptionsView = ClassOptionsView;

}).call(this);
// Generated by CoffeeScript 1.10.0
(function() {
  var CreateClassView, exports, ref;

  exports = exports != null ? exports : this;

  exports.views = (ref = exports.views) != null ? ref : this;

  CreateClassView = Backbone.View.extend({
    initialize: function() {
      return this.render();
    },
    render: function() {
      var template;
      template = _.template($("#template_tools_navbar").html(), {});
      return this.$el.html(template);
    },
    events: {
      "click a#crearclase_button": "create_class",
      "click a#translate_button": "translate_owllink",
      "click a#insertowllink_button": "insert_owllink",
      "click a#resetall_button": "reset_all",
      "click a#importjson_open_dialog": "import_json",
      "click a#exportjson_open_dialog": "export_json",
      "click a#meta_erd_button": "meta_to_erd",
      "click a#savejson": "save_json",
      "click a#loadjson": "load_json"
    },
    meta_to_erd: function(event) {
      console.log(event);
      return guiinst.to_erd();
    },
    create_class: function(event) {
      return guiinst.add_object_type({
        name: $("#crearclase_input").val()
      });
    },
    translate_owllink: function(event) {
      var strategy, syntax;
      syntax = this.get_translation_format();
      strategy = this.get_translation_strategy();
      return gui.gui_instance.translate_formal(strategy, syntax);
    },
    get_translation_format: function() {
      return $("#format_select")[0].value;
    },
    get_translation_strategy: function() {
      return $("#strategy_select")[0].value;
    },
    insert_owllink: function() {
      return guiinst.show_insert_owllink();
    },
    reset_all: function() {
      return guiinst.reset_all();
    },
    import_json: function() {
      return guiinst.show_import_json();
    },
    export_json: function() {
      return guiinst.show_export_json();
    },
    save_json: function() {
      return gui.gui_instance.show_save_json();
    },
    load_json: function() {
      return gui.gui_instance.show_load_json();
    }
  });

  exports.views.CreateClassView = CreateClassView;

}).call(this);
// Generated by CoffeeScript 1.10.0
(function() {
  var DoneWidget, exports, ref;

  exports = exports != null ? exports : this;

  exports.views = (ref = exports.views) != null ? ref : {};

  DoneWidget = Backbone.View.extend({
    initialize: function() {
      this.render();
      this.$el.hide();
      this.classid = null;
      return this.callback = function() {
        return console.log("Done clicked");
      };
    },
    render: function() {
      var template;
      template = _.template($("#template_done_widget").html());
      return this.$el.html(template({
        classid: this.classid
      }));
    },
    events: {
      "click a#done_button": "done_clicked"
    },
    done_clicked: function(event) {
      this.callback();
      return this.hide();
    },
    set_callback: function(fnc) {
      if (fnc != null) {
        return this.callback = fnc;
      } else {
        return this.callback = function() {
          return console.log("Done clicked");
        };
      }
    },
    hide: function() {
      return this.$el.hide();
    },
    set_pos: function(x, y) {
      this.x = x;
      this.y = y;
      return this.$el.css({
        top: this.y,
        left: this.x,
        position: 'absolute',
        'z-index': 1
      });
    },
    show: function(pos, callback_fnc) {
      if (pos == null) {
        pos = null;
      }
      if (callback_fnc == null) {
        callback_fnc = null;
      }
      if (pos != null) {
        this.set_pos(pos.x, pos.y);
      }
      this.set_callback(callback_fnc);
      return this.$el.show();
    }
  });

  exports.views.DoneWidget = DoneWidget;

}).call(this);
// Generated by CoffeeScript 1.10.0
(function() {
  var EditClassView, exports, ref;

  exports = exports != null ? exports : this;

  exports.views = (ref = exports.views) != null ? ref : this;

  EditClassView = Backbone.View.extend({
    initialize: function() {
      this.render();
      return this.$el.hide();
    },
    render: function() {
      var template;
      template = _.template($("#template_editclass").html());
      return this.$el.html(template({
        classid: this.classid
      }));
    },
    events: {
      "click a#editclass_button": "edit_class",
      "click a#close_button": "hide"
    },
    set_classid: function(classid) {
      var viewpos;
      this.classid = classid;
      viewpos = graph.getCell(this.classid).findView(paper).getBBox();
      this.$el.css({
        top: viewpos.y + 50,
        left: viewpos.x,
        position: 'absolute',
        'z-index': 1
      });
      return this.$el.show();
    },
    get_classid: function() {
      return this.classid;
    },
    edit_class: function(event) {
      var name;
      name = $("#editclass_input").val();
      gui.gui_instance.edit_class_name(this.classid, name);
      return gui.gui_instance.hide_options();
    },
    hide: function() {
      return this.$el.hide();
    }
  });

  exports.views.EditClassView = EditClassView;

}).call(this);
// Generated by CoffeeScript 1.10.0
(function() {
  var ErrorWidgetView, exports, ref;

  exports = exports != null ? exports : this;

  exports.views = (ref = exports.views) != null ? ref : this;

  ErrorWidgetView = Backbone.View.extend({
    initialize: function() {
      this.render();
      return this.$el.find(".error-popup").popup();
    },
    render: function() {
      var template;
      template = _.template($("#template_errorwidget").html());
      return this.$el.html(template());
    },
    show: function(status, message) {
      $(".error-popup").popup("open");
      $("#errorstatus_text").html(status);
      $("#errormsg_text").html(message);
      return console.log(status + " - " + message);
    },
    events: {
      "click a#errorwidget_hide_btn": "hide"
    },
    hide: function() {
      return $(".error-popup").popup("close");
    }
  });

  exports.views.ErrorWidgetView = ErrorWidgetView;

}).call(this);
// Generated by CoffeeScript 1.10.0
(function() {
  var ExportJSONView, exports, ref;

  exports = exports != null ? exports : this;

  exports.views = (ref = exports.views) != null ? ref : this;

  ExportJSONView = Backbone.View.extend({
    initialize: function() {
      this.jsonstr = "";
      return this.render();
    },
    render: function() {
      var template;
      template = _.template($("#template_exportjson").html());
      this.$el.html(template({
        jsonstr: this.jsonstr
      }));
      return this.$el.enhanceWithin();
    },
    events: {
      "click a#exportjson_copybtn": "copy_jsonstr",
      "click a#exportjson_refreshbtn": "refresh"
    },
    copy_jsonstr: function() {
      console.log("Copying: " + this.jsonstr);
      return document.execCommand("copy", false, this.jsonstr);
    },
    refresh: function() {
      return guiinst.refresh_export_json();
    },
    set_jsonstr: function(jsonstr) {
      this.jsonstr = jsonstr;
      return this.render();
    }
  });

  exports.views.ExportJSONView = ExportJSONView;

}).call(this);
// Generated by CoffeeScript 1.10.0
(function() {
  var ImportJSONView, exports, ref;

  exports = exports != null ? exports : this;

  exports.views = (ref = exports.views) != null ? ref : this;

  ImportJSONView = Backbone.View.extend({
    initialize: function() {
      this.render();
      this.$el.find(".importjson-popup").popup();
      return $("#importjson_importbtn").on('click', this.do_import);
    },
    render: function() {
      var template;
      template = _.template($("#template_importjson").html());
      return this.$el.html(template());
    },
    show: function() {
      return $(".importjson-popup").popup("open");
    },
    events: {
      "click a#importjson_importbtn": "do_import"
    },
    do_import: function() {
      var jsonstr;
      console.log("Doing import now!");
      $(".importjson-popup").popup("close");
      jsonstr = $("#importjson_input").val();
      return guiinst.import_jsonstr(jsonstr);
    }
  });

  exports.views.ImportJSONView = ImportJSONView;

}).call(this);
// Generated by CoffeeScript 1.10.0
(function() {
  var IsaOptionsView, exports, ref;

  exports = exports != null ? exports : this;

  exports.views = (ref = exports.views) != null ? ref : this;

  IsaOptionsView = Backbone.View.extend({
    initialize: function() {
      this.render();
      return this.$el.hide();
    },
    render: function() {
      var template;
      template = _.template($("#template_isaoptions").html());
      return this.$el.html(template({
        classid: this.classid
      }));
    },
    events: {
      'click a#isa_button': 'new_isa'
    },
    new_isa: function() {
      var covering, disjoint;
      disjoint = $("#chk-disjoint").prop("checked");
      covering = $("#chk-covering").prop("checked");
      return guiinst.set_isa_state(this.classid, disjoint, covering);
    },
    set_classid: function(classid) {
      var viewpos;
      this.classid = classid;
      viewpos = graph.getCell(this.classid).findView(paper).getBBox();
      this.$el.css({
        top: viewpos.y + 150,
        left: viewpos.x,
        position: 'absolute',
        'z-index': 1
      });
      return this.$el.show();
    },
    get_classid: function() {
      return this.classid;
    },
    hide: function() {
      return this.$el.hide();
    }
  });

  exports.views.IsaOptionsView = IsaOptionsView;

}).call(this);
// Generated by CoffeeScript 1.10.0
(function() {
  var LoginWidgetView, exports, ref;

  LoginWidgetView = Backbone.View.extend({
    initialize: function() {
      this.doing_login = true;
      this.render();
      $("a#login_login_btn").on("click", this.do_login);
      return $("a#logout_logout_btn").on("click", this.do_logout);
    },
    render: function() {
      var template;
      template = _.template($("#template_loginwidget").html());
      this.$el.html(template());
      return this.set_doing_login(this.doing_login);
    },
    hide: function() {
      return $("#login-header").collapsible("collapse");
    },
    show: function() {
      this.set_doing_login(this.doing_login);
      return $("" + (login - header)).collapsible("expand");
    },
    do_login: function(event) {
      var nl;
      console.log("do_login");
      login.lm_instance.hide_login();
      nl = login.lm_instance.new_login($("#login_username").val());
      return nl.do_login($("#login_password").val());
    },
    do_logout: function(event) {
      console.log("do_logout");
      login.lm_instance.hide_login();
      return login.lm_instance.current.do_logout();
    },
    set_doing_login: function(doing_login) {
      this.doing_login = doing_login;
      if (this.doing_login) {
        $("#logoutForm").hide();
        return $("#loginForm").show();
      } else {
        $("#loginForm").hide();
        return $("#logoutForm").show();
      }
    }
  });

  exports = exports != null ? exports : this;

  exports.login = (ref = exports.login) != null ? ref : {};

  exports.login.LoginWidgetView = LoginWidgetView;

}).call(this);
// Generated by CoffeeScript 1.10.0
(function() {
  var OWLlinkInsertView, exports, ref;

  exports = exports != null ? exports : this;

  exports.views = (ref = exports.views) != null ? ref : this;

  OWLlinkInsertView = Backbone.View.extend({
    initialize: function() {
      this.render();
      return this.textarea = this.$el.find("#insert_owllink_input");
    },
    render: function() {
      var template;
      template = _.template($("#template_insertowllink").html());
      return this.$el.html(template());
    },
    events: {
      "click a#insert_owlclass": "insert_class"
    },
    get_owllink: function() {
      return this.textarea[0].value;
    },
    set_owllink: function(str) {
      return this.textarea[0].value = str;
    },
    append_owllink: function(str) {
      return this.textarea[0].value = this.textarea[0].value + str;
    },
    insert_class: function() {
      return this.append_owllink("<owl:Class IRI=\"CLASSNAME\" />");
    }
  });

  exports.views.OWLlinkInsertView = OWLlinkInsertView;

}).call(this);
// Generated by CoffeeScript 1.10.0
(function() {
  var RelationOptionsView, exports, ref;

  exports = exports != null ? exports : this;

  exports.views = (ref = exports.views) != null ? ref : this;

  RelationOptionsView = Backbone.View.extend({
    initialize: function() {
      this.render();
      return this.$el.hide();
    },
    render: function() {
      var template;
      template = _.template($("#template_relationoptions").html());
      return this.$el.html(template({
        classid: this.classid
      }));
    },
    events: {
      "click a#association_button": "new_relation",
      "click a#assoc_class_button": "new_assoc_class"
    },
    cardfrom: function() {
      var from_1, from_2, from_aux;
      from_1 = $('#cardfrom-1').val();
      console.log(from_1);
      from_aux = from_1.concat("..");
      from_2 = $('#cardfrom-2').val();
      console.log(from_2);
      this.from = from_aux.concat(from_2);
      return this.from_role = $('#role-from').val();
    },
    cardto: function() {
      var too_1, too_2, too_aux;
      too_1 = $('#cardto-1').val();
      console.log(too_1);
      too_aux = too_1.concat("..");
      too_2 = $('#cardto-2').val();
      console.log(too_2);
      this.too = too_aux.concat(too_2);
      return this.to_role = $('#role-to').val();
    },
    new_relation: function() {
      var mult, name, roles;
      this.cardfrom();
      this.cardto();
      mult = [];
      mult[0] = this.from;
      mult[1] = this.too;
      roles = [];
      roles[0] = this.from_role;
      roles[1] = this.to_role;
      name = $("#assoc_name").val();
      console.log("New association without class:");
      console.log(mult);
      return gui.gui_instance.set_association_state(this.classid, mult, roles, name, false);
    },
    new_assoc_class: function(from, too) {
      var mult, name, roles;
      this.cardfrom();
      this.cardto();
      mult = [];
      mult[0] = this.from;
      mult[1] = this.too;
      roles = [];
      roles[0] = this.from_role;
      roles[1] = this.to_role;
      name = $("#assoc_name").val();
      this.hide();
      console.log("New association with class: " + name);
      console.log(mult);
      return gui.gui_instance.set_association_state(this.classid, mult, roles, name, true);
    },
    map_to_mult: function(str) {
      switch (str) {
        case "zeromany":
          return "0..*";
        case "onemany":
          return "1..*";
        case "zeroone":
          return "0..1";
        case "oneone":
          return "1..1";
      }
    },
    set_classid: function(classid) {
      var viewpos;
      this.classid = classid;
      viewpos = graph.getCell(this.classid).findView(paper).getBBox();
      this.$el.css({
        top: viewpos.y + 50,
        left: viewpos.x + 100,
        position: 'absolute',
        'z-index': 1
      });
      return this.$el.show();
    },
    get_classid: function() {
      return this.classid;
    },
    hide: function() {
      return this.$el.hide();
    }
  });

  exports.views.RelationOptionsView = RelationOptionsView;

}).call(this);
// Generated by CoffeeScript 1.10.0
(function() {
  var SaveLoadJson, exports, ref;

  SaveLoadJson = Backbone.View.extend({
    initialize: function() {
      this.is_loading = true;
      this.jsonlist = [];
      return this.render();
    },
    render: function() {
      var template;
      template = _.template($("#template_saveloadjsonwidget").html(), {});
      return this.$el.html(template);
    },
    events: {
      "click a#savejson_save_btn": "save",
      "click #modelList a": "load_model"
    },
    set_jsonlist: function(list) {
      this.jsonlist = list;
      $("#modelList").html('');
      $(this.retrieve_html_list()).appendTo("#modelList").enhanceWithin();
      $("#modelList").listview();
      return $("#modelList").listview("refresh");
    },
    retrieve_html_list: function() {
      var lst_str;
      lst_str = this.jsonlist.map(function(value, index, arr) {
        return '<li><a href="#">' + value + '</a></li>';
      });
      return lst_str.join(' ');
    },
    save: function() {
      var jsonstr, modelname;
      modelname = $("#savejson_name").val();
      jsonstr = gui.gui_instance.current_gui.diag_to_json();
      return login.lm_instance.current.save_model(jsonstr, modelname);
    },
    load_model: function(event) {
      var modelname;
      modelname = event.target.text;
      return login.lm_instance.current.load_model(modelname);
    }
  });

  exports = exports != null ? exports : this;

  exports.login = (ref = exports.login) != null ? ref : {};

  exports.login.SaveLoadJson = SaveLoadJson;

}).call(this);
// Generated by CoffeeScript 1.10.0
(function() {
  var ToolsUMLView, exports, ref;

  exports = exports != null ? exports : this;

  exports.views = (ref = exports.views) != null ? ref : {};

  ToolsUMLView = Backbone.View.extend({
    initialize: function() {
      this.render();
      return this.classnum = 0;
    },
    render: function() {
      var template;
      template = _.template($("#template_tools_uml").html(), {});
      return this.$el.html(template);
    },
    events: {
      'click a#umlclass_button': 'umlclass_pressed',
      'click a#umlassoc_button': 'umlassoc_pressed',
      'click a#umlisa_button': 'umlisa_pressed'
    },
    umlclass_pressed: function() {
      this.classnum += 1;
      return gui.gui_instance.add_object_type({
        name: "Class" + this.classnum
      });
    },
    umlassoc_pressed: function() {
      return console.log('umlassoc');
    },
    umlisa_pressed: function() {
      return console.log('umlisa');
    }
  });

  exports.views.ToolsUML = ToolsUMLView;

}).call(this);
// Generated by CoffeeScript 1.10.0
(function() {
  var TrafficLightsView, exports, ref;

  exports = exports != null ? exports : this;

  exports.views = (ref = exports.views) != null ? ref : this;

  TrafficLightsView = Backbone.View.extend({
    initialize: function() {
      return this.render();
    },
    render: function() {
      var template;
      template = _.template($("#template_trafficlight").html(), {});
      return this.$el.html(template);
    },
    events: {
      "click a#traffic_btn": "check_satisfiable"
    },
    check_satisfiable: function(event) {
      return gui.gui_instance.check_satisfiable();
    },
    turn_red: function() {
      return this.$el.find("#traffic_img").attr("src", "imgs/h-traffic-light-red.svg");
    },
    turn_green: function() {
      return this.$el.find("#traffic_img").attr("src", "imgs/h-traffic-light-green.svg");
    },
    turn_yellow: function() {
      return this.$el.find("#traffic_img").attr("src", "imgs/h-traffic-light-yellow.svg");
    },
    turn_yellow_flashing: function() {
      return this.$el.find("#traffic_img").attr("src", "imgs/h-traffic-light-red-flashing.svg");
    },
    turn_red_flashing: function() {
      return this.$el.find("#traffic_img").attr("src", "imgs/h-traffic-light-red-flashing.svg");
    },
    turn_all: function() {
      return this.$el.find("#traffic_img").attr("src", "imgs/h-traffic-light.svg");
    }
  });

  exports.views.TrafficLightsView = TrafficLightsView;

}).call(this);
// Generated by CoffeeScript 1.10.0
(function() {
  var AttrOptionsEERView, exports, ref, ref1;

  exports = exports != null ? exports : this;

  exports.views = (ref = exports.views) != null ? ref : this;

  exports.views.eer = (ref1 = exports.views.eer) != null ? ref1 : this;

  AttrOptionsEERView = Backbone.View.extend({
    initialize: function() {
      this.render();
      return this.$el.hide();
    },
    render: function() {
      var template;
      template = _.template($("#template_attroptions").html());
      return this.$el.html(template({
        attrid: this.attrid
      }));
    },
    events: {
      "click a#deleteattr_button": "delete_attr",
      "click a#editattr_button": "edit_attr"
    },
    set_attrid: function(attrid) {
      var viewpos;
      this.attrid = attrid;
      viewpos = graph.getCell(this.attrid).findView(paper).getBBox();
      this.$el.css({
        top: viewpos.y + 50,
        left: viewpos.x - 30,
        position: 'absolute',
        'z-index': 1
      });
      return this.$el.show();
    },
    get_attrid: function() {
      return this.attrid;
    },
    delete_attr: function(event) {
      gui.gui_instance.hide_options();
      return gui.gui_instance.delete_attr(this.attrid);
    },
    edit_attr: function(event) {
      gui.gui_instance.hide_options();
      gui.gui_instance.set_editclass_classid(this.attrid);
      return this.hide();
    },
    hide: function() {
      return this.$el.hide();
    }
  });

  exports.views.eer.AttrOptionsEERView = AttrOptionsEERView;

}).call(this);
// Generated by CoffeeScript 1.10.0
(function() {
  var CreateEERView, exports, ref, ref1;

  exports = exports != null ? exports : this;

  exports.views = (ref = exports.views) != null ? ref : this;

  exports.views.eer = (ref1 = exports.views.eer) != null ? ref1 : this;

  CreateEERView = Backbone.View.extend({
    initialize: function() {
      return this.render();
    },
    render: function() {
      var template;
      template = _.template($("#template_tools_navbar_erd").html(), {});
      return this.$el.html(template);
    },
    events: {
      "click a#crearclase_button": "create_class",
      "click a#translate_button": "translate_owllink",
      "click a#insertowllink_button": "insert_owllink",
      "click a#resetall_button": "reset_all",
      "click a#importjson_open_dialog": "import_json",
      "click a#exportjson_open_dialog": "export_json",
      "click a#meta_erd_button": "meta_to_erd",
      "click a#savejson": "save_json",
      "click a#loadjson": "load_json"
    },
    meta_to_erd: function(event) {
      console.log(event);
      return guiinst.to_erd();
    },
    create_class: function(event) {
      return guiinst.add_object_type({
        name: $("#crearclase_input").val()
      });
    },
    translate_owllink: function(event) {
      var strategy, syntax;
      syntax = this.get_translation_format();
      strategy = this.get_translation_strategy();
      return gui.gui_instance.translate_formal(strategy, syntax);
    },
    get_translation_format: function() {
      return $("#format_select")[0].value;
    },
    get_translation_strategy: function() {
      return $("#strategy_select")[0].value;
    },
    insert_owllink: function() {
      return guiinst.show_insert_owllink();
    },
    reset_all: function() {
      return guiinst.reset_all();
    },
    import_json: function() {
      return guiinst.show_import_json();
    },
    export_json: function() {
      return guiinst.show_export_json();
    },
    save_json: function() {
      return gui.gui_instance.show_save_json();
    },
    load_json: function() {
      return gui.gui_instance.show_load_json();
    }
  });

  exports.views.eer.CreateEERView = CreateEERView;

}).call(this);
// Generated by CoffeeScript 1.10.0
(function() {
  var RelationOptionsEERView, exports, ref, ref1;

  exports = exports != null ? exports : this;

  exports.views = (ref = exports.views) != null ? ref : this;

  exports.views.eer = (ref1 = exports.views.eer) != null ? ref1 : this;

  RelationOptionsEERView = Backbone.View.extend({
    initialize: function() {
      this.render();
      return this.$el.hide();
    },
    render: function() {
      var template;
      template = _.template($("#template_relationoptions").html());
      return this.$el.html(template({
        classid: this.classid
      }));
    },
    events: {
      "click a#association_button": "new_relation",
      "click a#assoc_class_button": "new_assoc_class"
    },
    cardfrom: function() {
      var from_1, from_2, from_aux;
      from_1 = $('#cardfrom-1').val();
      from_2 = $('#cardfrom-2').val();
      if ((from_1 !== "") && (from_2 !== "")) {
        from_aux = from_1.concat("..");
        this.from = from_aux.concat(from_2);
      } else if ((from_1 === "") && (from_2 !== "")) {
        from_1 = "0";
        from_aux = from_1.concat("..");
        this.from = from_aux.concat(from_2);
      } else if ((from_1 !== "") && (from_2 === "")) {
        from_2 = "*";
        from_aux = from_1.concat("..");
        this.from = from_aux.concat(from_2);
      } else {
        this.from = "";
      }
      return this.from_role = $('#role-from').val();
    },
    cardto: function() {
      var too_1, too_2, too_aux;
      too_1 = $('#cardto-1').val();
      too_2 = $('#cardto-2').val();
      if ((too_1 !== "") && (too_2 !== "")) {
        too_aux = too_1.concat("..");
        this.too = too_aux.concat(too_2);
      } else if ((too_1 === "") && (too_2 !== "")) {
        too_1 = "0";
        too_aux = too_1.concat("..");
        this.too = too_aux.concat(too_2);
      } else if ((too_1 !== "") && (too_2 === "")) {
        too_2 = "*";
        too_aux = too_1.concat("..");
        this.too = too_aux.concat(too_2);
      } else {
        this.too = "";
      }
      return this.to_role = $('#role-to').val();
    },
    new_relation: function() {
      var mult, name, roles;
      this.cardfrom();
      this.cardto();
      mult = [];
      mult[0] = this.from;
      mult[1] = this.too;
      roles = [];
      roles[0] = this.from_role;
      roles[1] = this.to_role;
      name = null;
      if ($("#assoc_name").val() !== "") {
        name = $("#assoc_name").val();
      }
      this.hide();
      return gui.gui_instance.set_association_state(this.classid, mult, roles, name, false);
    },
    new_assoc_class: function(from, too) {
      var mult, name, roles;
      this.cardfrom();
      this.cardto();
      mult = [];
      mult[0] = this.from;
      mult[1] = this.too;
      roles = [];
      roles[0] = this.from_role;
      roles[1] = this.to_role;
      name = $("#assoc_name").val();
      this.hide();
      return gui.gui_instance.set_association_state(this.classid, mult, roles, name, true);
    },
    map_to_mult: function(str) {
      switch (str) {
        case "zeromany":
          return "0..*";
        case "onemany":
          return "1..*";
        case "zeroone":
          return "0..1";
        case "oneone":
          return "1..1";
      }
    },
    set_classid: function(classid) {
      var viewpos;
      this.classid = classid;
      viewpos = graph.getCell(this.classid).findView(paper).getBBox();
      this.$el.css({
        top: viewpos.y + 50,
        left: viewpos.x + 100,
        position: 'absolute',
        'z-index': 1
      });
      return this.$el.show();
    },
    get_classid: function() {
      return this.classid;
    },
    hide: function() {
      return this.$el.hide();
    },
    clear: function() {
      $("#left-rel").trigger("reset");
      $("#name-rel").trigger("reset");
      return $("#right-rel").trigger("reset");
    }
  });

  exports.views.eer.RelationOptionsEERView = RelationOptionsEERView;

}).call(this);
// Generated by CoffeeScript 1.10.0
(function() {
  var ToolsEERView, exports, ref, ref1;

  exports = exports != null ? exports : this;

  exports.views = (ref = exports.views) != null ? ref : {};

  exports.views.eer = (ref1 = exports.views.eer) != null ? ref1 : {};

  ToolsEERView = Backbone.View.extend({
    initialize: function() {
      this.render();
      return this.classnum = 0;
    },
    render: function() {
      var template;
      template = _.template($("#template_tools_eer").html(), {});
      return this.$el.html(template);
    },
    events: {
      'click a#umlclass_button': 'umlclass_pressed',
      'click a#umlassoc_button': 'umlassoc_pressed',
      'click a#umlisa_button': 'umlisa_pressed',
      'click a#eerattr_button': 'eerattr_pressed'
    },
    umlclass_pressed: function() {
      this.classnum += 1;
      return gui.gui_instance.add_object_type({
        name: "Class" + this.classnum
      });
    },
    eerattr_pressed: function() {
      this.classnum += 1;
      return gui.gui_instance.add_attribute({
        name: "Attr" + this.classnum
      });
    },
    umlassoc_pressed: function() {
      return console.log('umlassoc');
    },
    umlisa_pressed: function() {
      return console.log('umlisa');
    }
  });

  exports.views.eer.ToolsEERView = ToolsEERView;

}).call(this);
// Generated by CoffeeScript 1.10.0
(function() {
  var EditObjectTypeView, exports, ref, ref1;

  exports = exports != null ? exports : this;

  exports.views = (ref = exports.views) != null ? ref : this;

  exports.views.common = (ref1 = exports.views.common) != null ? ref1 : this;

  EditObjectTypeView = Backbone.View.extend({
    initialize: function() {
      this.render();
      return this.$el.hide();
    },
    render: function() {
      var template;
      template = _.template($("#template_editclass").html());
      return this.$el.html(template({
        classid: this.classid
      }));
    },
    events: {
      "click a#editclass_button": "edit_class",
      "click a#close_button": "hide"
    },
    set_classid: function(classid) {
      var viewpos;
      this.classid = classid;
      viewpos = graph.getCell(this.classid).findView(paper).getBBox();
      this.$el.css({
        top: viewpos.y + 50,
        left: viewpos.x,
        position: 'absolute',
        'z-index': 1
      });
      return this.$el.show();
    },
    get_classid: function() {
      return this.classid;
    },
    edit_class: function(event) {
      var name;
      name = $("#editclass_input").val();
      gui.gui_instance.edit_class_name(this.classid, name);
      return gui.gui_instance.hide_options();
    },
    hide: function() {
      return this.$el.hide();
    }
  });

  exports.views.common.EditObjectTypeView = EditObjectTypeView;

}).call(this);
// Generated by CoffeeScript 1.10.0
(function() {
  var ObjectTypeOptionsView, exports, ref, ref1;

  exports = exports != null ? exports : this;

  exports.views = (ref = exports.views) != null ? ref : this;

  exports.views.common = (ref1 = exports.views.common) != null ? ref1 : this;

  ObjectTypeOptionsView = Backbone.View.extend({
    initialize: function() {
      this.render();
      return this.$el.hide();
    },
    render: function() {
      var template;
      template = _.template($("#template_classoptions").html());
      return this.$el.html(template({
        classid: this.classid
      }));
    },
    events: {
      "click a#deleteclass_button": "delete_class",
      "click a#editclass_button": "edit_class"
    },
    set_classid: function(classid) {
      var viewpos;
      this.classid = classid;
      console.log(this.classid);
      viewpos = graph.getCell(this.classid).findView(paper).getBBox();
      this.$el.css({
        top: viewpos.y + 50,
        left: viewpos.x,
        position: 'absolute',
        'z-index': 1
      });
      return this.$el.show();
    },
    get_classid: function() {
      return this.classid;
    },
    delete_class: function(event) {
      gui.gui_instance.hide_options();
      return gui.gui_instance.delete_class(this.classid);
    },
    edit_class: function(event) {
      gui.gui_instance.hide_options();
      gui.gui_instance.set_editclass_classid(this.classid);
      return this.hide();
    },
    hide: function() {
      return this.$el.hide();
    }
  });

  exports.views.common.ObjectTypeOptionsView = ObjectTypeOptionsView;

}).call(this);
// Generated by CoffeeScript 1.10.0
(function() {
  var SubsumptionOptionsView, exports, ref, ref1;

  exports = exports != null ? exports : this;

  exports.views = (ref = exports.views) != null ? ref : this;

  exports.views.common = (ref1 = exports.views.common) != null ? ref1 : this;

  SubsumptionOptionsView = Backbone.View.extend({
    initialize: function() {
      this.render();
      return this.$el.hide();
    },
    render: function() {
      var template;
      template = _.template($("#template_isaoptions").html());
      return this.$el.html(template({
        classid: this.classid
      }));
    },
    events: {
      'click a#isa_button': 'new_isa'
    },
    new_isa: function() {
      var covering, disjoint;
      disjoint = $("#chk-disjoint").prop("checked");
      covering = $("#chk-covering").prop("checked");
      return guiinst.set_isa_state(this.classid, disjoint, covering);
    },
    set_classid: function(classid) {
      var viewpos;
      this.classid = classid;
      viewpos = graph.getCell(this.classid).findView(paper).getBBox();
      this.$el.css({
        top: viewpos.y + 150,
        left: viewpos.x,
        position: 'absolute',
        'z-index': 1
      });
      return this.$el.show();
    },
    get_classid: function() {
      return this.classid;
    },
    hide: function() {
      return this.$el.hide();
    }
  });

  exports.views.common.SubsumptionOptionsView = SubsumptionOptionsView;

}).call(this);
// Generated by CoffeeScript 1.10.0
(function() {
  var TrafficLightsView, exports, ref, ref1;

  exports = exports != null ? exports : this;

  exports.views = (ref = exports.views) != null ? ref : this;

  exports.views.common = (ref1 = exports.views.common) != null ? ref1 : this;

  TrafficLightsView = Backbone.View.extend({
    initialize: function() {
      return this.render();
    },
    render: function() {
      var template;
      template = _.template($("#template_trafficlight").html(), {});
      return this.$el.html(template);
    },
    events: {
      "click a#traffic_btn": "check_satisfiable"
    },
    check_satisfiable: function(event) {
      return gui.gui_instance.check_satisfiable();
    },
    turn_red: function() {
      return this.$el.find("#traffic_img").attr("src", "imgs/h-traffic-light-red.svg");
    },
    turn_green: function() {
      return this.$el.find("#traffic_img").attr("src", "imgs/h-traffic-light-green.svg");
    },
    turn_yellow: function() {
      return this.$el.find("#traffic_img").attr("src", "imgs/h-traffic-light-yellow.svg");
    },
    turn_yellow_flashing: function() {
      return this.$el.find("#traffic_img").attr("src", "imgs/h-traffic-light-red-flashing.svg");
    },
    turn_red_flashing: function() {
      return this.$el.find("#traffic_img").attr("src", "imgs/h-traffic-light-red-flashing.svg");
    },
    turn_all: function() {
      return this.$el.find("#traffic_img").attr("src", "imgs/h-traffic-light.svg");
    }
  });

  exports.views.common.TrafficLightsView = TrafficLightsView;

}).call(this);
