// Generated by CoffeeScript 1.10.0
(function() {
  var GUIORM, exports, ref,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  exports = exports != null ? exports : this;

  exports.gui = (ref = exports.gui) != null ? ref : {};

  GUIORM = (function(superClass) {
    extend(GUIORM, superClass);

    function GUIORM(graph, paper) {
      this.graph = graph;
      this.paper = paper;
      this.urlprefix = "";
      this.diag = new model.orm.ORMDiagram(this.graph);
      this.state = gui.state_inst.selection_state();
      this.crearclase = new CreateClassView({
        el: $("#crearclase")
      });
      this.editclass = new EditClassView({
        el: $("#editclass")
      });
      this.classoptions = new ClassOptionsView({
        el: $("#classoptions")
      });
      this.relationoptions = new RelationOptionsView({
        el: $("#relationoptions")
      });
      this.isaoptions = new IsaOptionsView({
        el: $("#isaoptions")
      });
      this.trafficlight = new TrafficLightsView({
        el: $("#trafficlight")
      });
      this.owllinkinsert = new OWLlinkInsertView({
        el: $("#owllink_placer")
      });
      this.errorwidget = new ErrorWidgetView({
        el: $("#errorwidget_placer")
      });
      this.importjsonwidget = new ImportJSONView({
        el: $("#importjsonwidget_placer")
      });
      this.exportjsonwidget = new ExportJSONView({
        el: $("#exportjson_placer")
      });
      this.serverconn = new ServerConnection(function(jqXHR, status, text) {
        return exports.gui.current_gui.show_error(status + ": " + text, jqXHR.responseText);
      });
      $("#diagram-page").enhanceWithin();
      $("#details-page").enhanceWithin();
      gui.set_current_instance(this);
    }

    GUIORM.prototype.set_urlprefix = function(str) {
      return this.urlprefix = str;
    };

    GUIORM.prototype.on_cell_clicked = function(cellview, event, x, y) {
      return this.state.on_cell_clicked(cellview, event, x, y, this);
    };

    GUIORM.prototype.set_options_classid = function(model_id) {
      this.relationoptions.set_classid(model_id);
      this.classoptions.set_classid(model_id);
      return this.isaoptions.set_classid(model_id);
    };

    GUIORM.prototype.hide_options = function() {
      this.classoptions.hide();
      this.relationoptions.hide();
      this.editclass.hide();
      return this.isaoptions.hide();
    };

    GUIORM.prototype.set_editclass_classid = function(model_id) {
      return this.editclass.set_classid(model_id);
    };

    GUIORM.prototype.add_object_type = function(hash_data) {
      this.hide_toolbar();
      return this.diag.add_class(hash_data);
    };

    GUIORM.prototype.add_attribute = function(hash_data) {};

    GUIORM.prototype.delete_class = function(class_id) {
      return this.diag.delete_class_by_classid(class_id);
    };

    GUIORM.prototype.edit_class_name = function(class_id, name) {
      this.diag.rename_class(class_id, name);
      return this.diag.update_view(class_id, this.paper);
    };

    GUIORM.prototype.add_relationship = function(class_a_id, class_b_id, name, mult) {
      if (name == null) {
        name = null;
      }
      if (mult == null) {
        mult = null;
      }
      this.diag.add_association(class_a_id, class_b_id, name, mult);
      return this.set_selection_state();
    };

    GUIORM.prototype.add_relationship_attr = function() {};

    GUIORM.prototype.add_subsumption = function(class_parent_id, class_child_id, disjoint, covering) {
      if (disjoint == null) {
        disjoint = false;
      }
      if (covering == null) {
        covering = false;
      }
      this.diag.add_generalization(class_parent_id, class_child_id, disjoint, covering);
      return this.set_selection_state();
    };

    GUIORM.prototype.show_error = function(status, error) {
      $.mobile.loading("hide");
      return this.errorwidget.show(status, error);
    };

    GUIORM.prototype.traffic_light_green = function() {
      return this.trafficlight.turn_green();
    };

    GUIORM.prototype.traffic_light_red = function() {
      return this.trafficlight.turn_red();
    };

    GUIORM.prototype.update_satisfiable = function(data) {
      var obj;
      console.log(data);
      obj = JSON.parse(data);
      this.set_trafficlight(obj);
      $("#reasoner_input").html(obj.reasoner.input);
      $("#reasoner_output").html(obj.reasoner.output);
      $.mobile.loading("hide");
      this.set_unsatisfiable(obj.unsatisfiable.classes);
      return this.set_satisfiable(obj.satisfiable.classes);
    };

    GUIORM.prototype.set_trafficlight = function(obj) {
      if (obj.satisfiable.kb) {
        if (obj.unsatisfiable.classes.length === 0) {
          return this.trafficlight.turn_green();
        } else {
          return this.trafficlight.turn_yellow();
        }
      } else {
        return this.trafficlight.turn_red();
      }
    };

    GUIORM.prototype.set_unsatisfiable = function(classes_list) {
      return this.diag.set_unsatisfiable(classes_list);
    };

    GUIORM.prototype.set_satisfiable = function(classes_list) {
      return this.diag.set_satisfiable(classes_list);
    };

    GUIORM.prototype.check_satisfiable = function() {
      $.mobile.loading("show", {
        text: "Consulting server...",
        textVisible: true,
        textonly: false
      });
      return this.serverconn.request_satisfiable(this.diag_to_json(), gui_instance.update_satisfiable);
    };

    GUIORM.prototype.update_translation = function(data) {
      var format;
      console.log(data);
      format = this.crearclase.get_translation_format();
      if (format === "html") {
        $("#html-output").html(data);
        $("#html-output").show();
        $("#owllink_source").hide();
      } else {
        $("#owllink_source").text(data);
        $("#owllink_source").show();
        $("#html-output").hide();
      }
      $.mobile.loading("hide");
      return gui_instance.change_to_details_page();
    };

    GUIORM.prototype.update_metamodel = function(data) {
      console.log(data);
      $("#owllink_source").text(data);
      $("#owllink_source").show();
      $("#html-output").hide();
      $.mobile.loading("hide");
      return change_to_details_page();
    };

    GUIORM.prototype.translate_owllink = function() {
      var format, json;
      format = this.crearclase.get_translation_format();
      $.mobile.loading("show", {
        text: "Consulting server...",
        textVisible: true,
        textonly: false
      });
      json = this.diag.to_json();
      return this.serverconn.request_translation(JSON.stringify(json), format, gui.update_translation);
    };

    GUIORM.prototype.change_to_details_page = function() {
      return $.mobile.changePage("#details-page", {
        transition: "slide"
      });
    };

    GUIORM.prototype.change_to_diagram_page = function() {
      return $.mobile.changePage("#diagram-page", {
        transition: "slide",
        reverse: true
      });
    };

    GUIORM.prototype.hide_toolbar = function() {
      return $("#tools-panel [data-rel=close]").click();
    };

    GUIORM.prototype.hide_umldiagram_page = function() {
      return $("#diagram-page").css("display", "none");
    };

    GUIORM.prototype.show_umldiagram_page = function() {
      return $("#diagram-page").css("display", "block");
    };

    GUIORM.prototype.set_association_state = function(class_id, mult) {
      this.state = gui.state_inst.association_state();
      this.state.set_cellStarter(class_id);
      return this.state.set_cardinality(mult);
    };

    GUIORM.prototype.set_isa_state = function(class_id, disjoint, covering) {
      if (disjoint == null) {
        disjoint = false;
      }
      if (covering == null) {
        covering = false;
      }
      this.state = gui.state_inst.isa_state();
      this.state.set_cellStarter(class_id);
      return this.state.set_constraint(disjoint, covering);
    };

    GUIORM.prototype.set_selection_state = function() {
      return this.state = gui.state_inst.selection_state();
    };

    GUIORM.prototype.show_export_json = function() {
      this.exportjsonwidget.set_jsonstr(this.diag_to_json());
      $(".exportjson_details").collapsible("expand");
      return this.change_to_details_page();
    };

    GUIORM.prototype.refresh_export_json = function() {
      return this.exportjsonwidget.set_jsonstr(this.diag_to_json());
    };

    GUIORM.prototype.show_import_json = function() {
      this.hide_toolbar();
      return this.importjsonwidget.show();
    };

    GUIORM.prototype.show_insert_owllink = function() {
      return this.change_to_details_page();
    };

    GUIORM.prototype.set_insert_owllink = function(str) {
      return this.owllinkinsert.set_owllink(str);
    };

    GUIORM.prototype.diag_to_json = function() {
      var json;
      json = this.diag.to_json();
      return JSON.stringify(json);
    };

    GUIORM.prototype.import_jsonstr = function(jsonstr) {
      var json;
      json = JSON.parse(jsonstr);
      this.owllinkinsert.append_owllink("\n" + json.owllink);
      return this.import_json(json);
    };

    GUIORM.prototype.import_json = function(json_obj) {
      return this.diag.import_json(json_obj);
    };

    GUIORM.prototype.reset_all = function() {
      this.diag.reset();
      this.owllinkinsert.set_owllink("");
      return this.hide_toolbar();
    };

    GUIORM.prototype.to_metamodel = function() {
      var json;
      $.mobile.loading("show", {
        text: "Metamodelling...",
        textVisible: true,
        textonly: false
      });
      json = JSON.stringify(this.diag.to_json());
      return this.serverconn.request_metamodel_translation(json, this.update_metamodel);
    };

    GUIORM.prototype.to_erd = function(gui_instance) {
      var json;
      $.mobile.loading("show", {
        text: "Generating ER Diagram...",
        textVisible: true,
        textonly: false
      });
      gui_instance.hide_toolbar();
      gui_instance.switch_to_erd();
      json = JSON.stringify(this.diag.to_json());
      this.serverconn.request_meta2erd_translation(json, function(data) {
        return gui_instance.import_jsonstr(data);
      });
      return $.mobile.loading("hide");
    };

    return GUIORM;

  })(gui.GUIIMPL);

  exports.gui.GUIORM = GUIORM;

}).call(this);
